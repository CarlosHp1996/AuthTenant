# 📋 Documentação: RegisterCommand.cs

## 🎯 **Objetivo**
Record imutável que representa um comando de registro de usuário em ambiente multi-tenant, encapsulando dados pessoais, credenciais e contexto de tenant. Implementa princípios DDD, Clean Architecture e SOLID.

## 🔧 **Funcionalidades Principais**

### **1. Estrutura DDD (Domain-Driven Design)**
- ✅ **Command Pattern**: Implementa padrão de comando do CQRS
- ✅ **Value Object**: Record imutável com validações de domínio
- ✅ **Business Rules**: Validações específicas do domínio de negócio
- ✅ **Ubiquitous Language**: Nomenclatura consistente com linguagem do negócio

### **2. Clean Architecture Compliance**
- ✅ **Camada de Application**: Posicionamento correto na arquitetura
- ✅ **Dependency Direction**: Não depende de camadas externas
- ✅ **Interface Segregation**: Implementa IRequest específico
- ✅ **Single Responsibility**: Foco exclusivo em dados de registro

### **3. SOLID Principles**
- ✅ **Single Responsibility**: Responsabilidade única de representar comando de registro
- ✅ **Open/Closed**: Extensível via métodos adicionais, fechado para modificação
- ✅ **Liskov Substitution**: Compatível com IRequest<Result<AuthResponseDto>>
- ✅ **Interface Segregation**: Usa interfaces específicas e necessárias
- ✅ **Dependency Inversion**: Não depende de implementações concretas

### **4. Validação Avançada de Domínio**
- ✅ **Data Annotations**: Validação automática de entrada
- ✅ **Business Rules Validation**: Validações específicas de negócio
- ✅ **Password Security Policy**: Política robusta de senhas
- ✅ **Email Domain Validation**: Validação avançada de formato de email
- ✅ **Name Pattern Validation**: Validação de padrões de nome válidos

### **5. Segurança e Compliance**
- ✅ **Password Strength**: Requisitos rigorosos de segurança
- ✅ **Data Normalization**: Email normalizado para consistência
- ✅ **Secure Logging**: ToString() seguro excluindo dados sensíveis
- ✅ **Input Sanitization**: Validação e limpeza de entrada

## 🏗️ **Arquitetura DDD**

### **Domain Model:**
```csharp
public sealed record RegisterCommand : IRequest<Result<AuthResponseDto>>
{
    // Value Objects
    string Email       // Email como identificador único
    string Password    // Credencial de autenticação
    string FirstName   // Nome próprio do usuário
    string LastName    // Sobrenome do usuário
    string TenantId    // Contexto de tenant (agregado)
}
```

### **Domain Properties:**
- `NormalizedEmail`: Email processado para consistência
- `FullName`: Nome completo derivado
- `UserName`: Username derivado do email

### **Domain Methods:**
- `IsValid()`: Validação de regras de negócio
- `GetValidationResult()`: Resultado detalhado de validação
- Domain-specific private validators

## 📊 **Validações de Domínio**

### **Email Business Rules:**
```
✅ Required: Obrigatório para identificação
✅ EmailAddress: Formato RFC válido
✅ StringLength: Máximo 256 caracteres (padrão RFC)
✅ Domain Validation: Estrutura de domínio válida
✅ Anti-patterns: Não pode começar/terminar com ponto
✅ Normalization: Conversão para lowercase
```

### **Password Security Policy:**
```
✅ Required: Obrigatório para autenticação
✅ MinLength: Mínimo 8 caracteres (segurança)
✅ MaxLength: Máximo 100 caracteres (performance)
✅ Complexity: Uppercase + Lowercase + Digit + Special
✅ Special Characters: @$!%*?& permitidos
✅ RegEx Validation: Padrão rigoroso aplicado
```

### **Name Validation Rules:**
```
✅ Required: Nomes são obrigatórios
✅ Length: Entre 2 e 50 caracteres
✅ Character Set: Letras, espaços, apostrofes, hífens
✅ Unicode Support: Suporte a caracteres acentuados
✅ Anti-patterns: Previne caracteres especiais maliciosos
```

### **Tenant Context Rules:**
```
✅ Required: Contexto obrigatório para multi-tenancy
✅ Length: Máximo 50 caracteres
✅ Business Rule: Deve existir e estar ativo (validado no handler)
```

## 🔒 **Segurança Avançada**

### **Password Security:**
```csharp
// Política de senha implementada:
- Mínimo 8 caracteres
- Pelo menos 1 letra maiúscula
- Pelo menos 1 letra minúscula  
- Pelo menos 1 dígito
- Pelo menos 1 caractere especial (@$!%*?&)
- Proteção contra senhas comuns (futuro)
```

### **Input Validation:**
- Email normalization para consistência
- Trim de espaços em nomes
- Validação de caracteres perigosos
- Prevenção de XSS em campos de texto

### **Data Protection:**
```csharp
// ToString() seguro para logs:
"RegisterCommand(Email=user@domain.com, FullName=John Doe, TenantId=tenant-001)"
// Password nunca aparece em logs ou traces
```

## 🎮 **Uso e Integração DDD**

### **Command Creation (Application Layer):**
```csharp
var registerCommand = new RegisterCommand(
    Email: "user@example.com",
    Password: "SecurePass123!",
    FirstName: "John",
    LastName: "Doe",
    TenantId: "tenant-001"
);
```

### **Domain Validation:**
```csharp
// Business rules validation
if (!registerCommand.IsValid())
{
    var validationResult = registerCommand.GetValidationResult();
    // Handle domain validation errors
}

// Access normalized data
var normalizedEmail = registerCommand.NormalizedEmail;
var fullName = registerCommand.FullName;
```

### **Integration with Handler:**
```csharp
// Command é processado pelo RegisterHandler
// seguindo princípios de separação de responsabilidades
var result = await mediator.Send(registerCommand);
```

## 📈 **Domain-Driven Benefits**

### **Ubiquitous Language:**
- Terminologia consistente (Register, Command, Tenant)
- Conceitos de negócio bem definidos
- Comunicação clara entre desenvolvedores e stakeholders

### **Business Logic Encapsulation:**
- Regras de negócio no local apropriado
- Validações específicas do domínio
- Proteção da integridade dos dados

### **Clean Architecture Benefits:**
- Independência de frameworks
- Testabilidade isolada
- Flexibilidade para mudanças
- Manutenibilidade aprimorada

## 🧪 **Testabilidade DDD**

### **Unit Testing Scenarios:**
```csharp
// Testes de validação de domínio
[Fact] ValidEmail_ShouldPass()
[Fact] InvalidEmailFormat_ShouldFail()
[Fact] WeakPassword_ShouldFail()
[Fact] StrongPassword_ShouldPass()
[Fact] InvalidName_ShouldFail()
[Fact] NormalizedEmail_ShouldBeLowercase()
[Fact] FullName_ShouldCombineNames()
[Fact] ValidationResult_ShouldContainSpecificErrors()
```

### **Domain Testing Benefits:**
- Isolamento das regras de negócio
- Testes rápidos sem dependências
- Cobertura completa de cenários
- Validação de comportamento de domínio

## 🚀 **Performance e Otimização**

### **Memory Efficiency:**
- Record structure para eficiência
- String interning para emails comuns
- Lazy validation com IsValid()
- Minimal object allocation

### **Validation Performance:**
```csharp
// Validação otimizada com short-circuit
private bool IsEmailValid() => 
    !string.IsNullOrWhiteSpace(Email) &&
    Email.Contains('@') &&
    Email.Length <= 256 &&
    Email.Split('@').Length == 2;
```

## 📝 **ValidationResult Value Object**

### **Design Principles:**
```csharp
public sealed record ValidationResult(bool IsValid, IReadOnlyList<string> Errors);
```

### **Benefits:**
- Immutable result structure
- Type-safe error collection
- Clear success/failure indication
- Detailed error information

## 📝 **Changelog DDD Implementation**

### **Versão Atual (2.0):**
- ✅ **DDD Implementation**: Command pattern com regras de domínio
- ✅ **Clean Architecture**: Posicionamento correto na camada Application
- ✅ **SOLID Compliance**: Todos os princípios implementados
- ✅ **Domain Validation**: Validações específicas de negócio
- ✅ **Value Objects**: Properties derivadas como NormalizedEmail
- ✅ **Business Logic**: Regras de senha e validação avançadas
- ✅ **Ubiquitous Language**: Terminologia consistente
- ✅ **Security Policy**: Políticas rigorosas implementadas

### **Domain Improvements:**
- Advanced password security policy
- Business-specific email validation
- Name pattern validation with Unicode support
- Tenant context validation
- Comprehensive error reporting
- Secure logging implementation

### **Architectural Benefits:**
- Complete DDD implementation
- Clean Architecture compliance
- SOLID principles adherence
- Enhanced testability
- Improved maintainability
- Domain integrity protection

---
**Data da Última Atualização:** 05/09/2025  
**Versão:** 2.0 (DDD + Clean Architecture + SOLID)  
**Status:** ✅ Produção Ready  
**Architecture:** 🏛️ DDD + Clean + SOLID Compliant
