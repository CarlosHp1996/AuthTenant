# 📋 Documentação: RegisterHandler.cs

## 🎯 **Objetivo**
Handler especializado para processamento de comandos de registro de usuário em ambiente multi-tenant. Implementa princípios DDD, Clean Architecture e SOLID para orchestrar o processo de criação de contas de usuário com validações de domínio e segurança avançada.

## 🔧 **Funcionalidades Principais**

### **1. Domain-Driven Design (DDD)**
- ✅ **Application Service**: Orchestração de operações de domínio
- ✅ **Domain Logic**: Validações de regras de negócio
- ✅ **Aggregate Management**: Coordenação entre User e Tenant aggregates
- ✅ **Business Process**: Fluxo completo de registro seguindo regras de domínio

### **2. Clean Architecture Compliance**
- ✅ **Application Layer**: Posicionamento correto como Application Service
- ✅ **Dependency Direction**: Depende apenas de abstrações (interfaces)
- ✅ **Use Case Implementation**: Implementa caso de uso específico
- ✅ **Infrastructure Independence**: Não depende de detalhes de infraestrutura

### **3. SOLID Principles**
- ✅ **Single Responsibility**: Responsabilidade única de processar registro
- ✅ **Open/Closed**: Extensível via métodos privados especializados
- ✅ **Liskov Substitution**: Implementa IRequestHandler corretamente
- ✅ **Interface Segregation**: Usa interfaces específicas e necessárias
- ✅ **Dependency Inversion**: Depende de abstrações, não implementações

### **4. Orchestração de Domínio**
- ✅ **Domain Validation**: Validação de regras de negócio
- ✅ **Tenant Context**: Validação de contexto multi-tenant
- ✅ **User Aggregate**: Criação e configuração de entidade de usuário
- ✅ **Business Workflow**: Fluxo de processo de negócio completo

### **5. Segurança e Auditoria**
- ✅ **Security Validation**: Validações de segurança em múltiplas camadas
- ✅ **Audit Logging**: Rastreamento completo de operações
- ✅ **Error Handling**: Tratamento seguro de exceções
- ✅ **Data Protection**: Proteção de dados sensíveis em logs

## 🏗️ **Arquitetura DDD e Clean**

### **Application Service Structure:**
```csharp
RegisterHandler : IRequestHandler<RegisterCommand, Result<AuthResponseDto>>
├── Domain Validation Layer
├── Tenant Context Validation  
├── User Existence Validation
├── Entity Creation Layer
├── Infrastructure Persistence
├── Post-Registration Operations
└── Response Generation
```

### **Dependencies (Dependency Inversion):**
- `UserManager<ApplicationUser>`: Identity management abstraction
- `ITenantRepository`: Domain repository abstraction
- `ITokenService`: Application service abstraction
- `IMapper`: Object mapping abstraction
- `ILogger<RegisterHandler>`: Logging abstraction

### **Domain Flow:**
1. **Command Validation**: Validação de regras de domínio
2. **Tenant Validation**: Verificação de contexto de agregado
3. **Business Rules**: Aplicação de regras de negócio
4. **Entity Creation**: Criação de entidade de domínio
5. **Persistence**: Operação de infraestrutura
6. **Domain Events**: Eventos pós-criação (futuro)

## 📊 **Validações de Domínio Implementadas**

### **1. Command Validation (Domain Layer):**
```csharp
private async Task<Result<AuthResponseDto>> ValidateRegistrationRequestAsync()
{
    // Utiliza regras de domínio do próprio Command
    var validationResult = request.GetValidationResult();
    
    // Validações específicas de negócio:
    ✅ Email format and business rules
    ✅ Password security policy
    ✅ Name validation rules  
    ✅ Required field validation
    ✅ Length and pattern constraints
}
```

### **2. Tenant Context Validation (Aggregate Validation):**
```csharp
private async Task<Result<AuthResponseDto>> ValidateTenantAsync()
{
    // Regras de negócio para Tenant:
    ✅ Tenant existence verification
    ✅ Active status validation
    ✅ Subscription status (future)
    ✅ User limits validation (future)
    ✅ Regional compliance (future)
}
```

### **3. User Existence Validation (Business Rules):**
```csharp
private async Task<Result<AuthResponseDto>> CheckUserExistsAsync()
{
    // Multi-tenant business rules:
    ✅ User uniqueness within tenant
    ✅ Cross-tenant validation
    ✅ Email uniqueness rules
    ✅ Business conflict detection
}
```

## 🔒 **Segurança Multi-Camada**

### **Domain Security:**
- Validação de regras de negócio antes de qualquer operação
- Verificação de integridade de dados de entrada
- Proteção contra violação de regras de domínio

### **Application Security:**
- Validação de contexto de tenant
- Verificação de permissões de criação
- Proteção contra ataques de enumeração

### **Infrastructure Security:**
- Password hashing via Identity framework
- Transaction management para atomicidade
- Audit trail para rastreabilidade

### **Logging Security:**
```csharp
// Logs seguros sem exposição de dados sensíveis:
"🆕 Processing registration request for user: {Email} in tenant: {TenantId}"
"✅ User registration completed successfully for: {Email} in tenant: {TenantId}"
// Password nunca aparece em logs
```

## 🎮 **Domain Entity Creation**

### **ApplicationUser Entity (Domain Model):**
```csharp
private static ApplicationUser CreateApplicationUser(RegisterCommand request)
{
    return new ApplicationUser
    {
        UserName = request.UserName,           // Derived from normalized email
        Email = request.NormalizedEmail,       // Normalized for consistency
        FirstName = request.FirstName?.Trim() ?? string.Empty,
        LastName = request.LastName?.Trim() ?? string.Empty,
        TenantId = request.TenantId,          // Multi-tenant context
        IsActive = true,                      // Default business state
        EmailConfirmed = false,               // Requires confirmation workflow
        CreatedAt = DateTime.UtcNow,          // Audit timestamp
        SecurityStamp = Guid.NewGuid().ToString(),    // Security token
        ConcurrencyStamp = Guid.NewGuid().ToString()  // Optimistic concurrency
    };
}
```

### **Domain Rules Applied:**
- Username derivation from email (business rule)
- Email normalization for consistency
- Default active state for new users
- Email confirmation requirement
- Security stamps for token invalidation
- Audit trail with creation timestamp

## 📈 **Logging Estruturado e Observabilidade**

### **Information Logs:**
```
🆕 Processing registration request for user: {Email} in tenant: {TenantId}
✅ User registration completed successfully for: {Email} in tenant: {TenantId}
```

### **Warning Logs:**
```
❌ Registration validation failed for user: {Email}
🏢 Tenant validation failed for: {TenantId}
👤 User existence check failed for: {Email} in tenant: {TenantId}
🚫 User creation failed for: {Email}
```

### **Error Logs:**
```
❌ Unexpected error during registration for user: {Email} in tenant: {TenantId}
Error validating tenant: {TenantId}
Error checking user existence: {Email}
Error creating user in Identity system: {Email}
```

### **Debug Logs:**
```
User created successfully in Identity system: {UserId}
Post-registration operations completed for user: {UserId}
```

## 🧪 **Testabilidade DDD**

### **Unit Testing Scenarios:**
```csharp
// Domain Logic Testing
[Fact] ValidRegistrationRequest_ShouldSucceed()
[Fact] InvalidCommand_ShouldFailValidation()
[Fact] InactiveTenant_ShouldFailValidation()
[Fact] ExistingUser_ShouldFailValidation()
[Fact] UserCreationFailure_ShouldReturnErrors()

// Integration Testing
[Fact] CompleteRegistrationFlow_ShouldSucceed()
[Fact] DatabaseError_ShouldHandleGracefully()
[Fact] ConcurrentRegistration_ShouldHandleCorrectly()
```

### **Mocking Strategy:**
- `Mock<UserManager<ApplicationUser>>`: Identity operations
- `Mock<ITenantRepository>`: Domain repository
- `Mock<ITokenService>`: Token generation
- `Mock<IMapper>`: Object mapping
- `Mock<ILogger<RegisterHandler>>`: Logging verification

## 🚀 **Post-Registration Operations (Future Domain Events)**

### **Current Implementation:**
```csharp
private async Task PerformPostRegistrationOperationsAsync()
{
    // Placeholder for future domain events:
    // - Send email confirmation
    // - Send welcome email  
    // - Create user profile
    // - Assign default roles
    // - Log registration event
    // - Trigger analytics events
}
```

### **Domain Events (Future):**
- `UserRegisteredEvent`: Para notificações
- `EmailConfirmationRequiredEvent`: Para workflow de confirmação
- `WelcomeEmailRequestedEvent`: Para comunicação
- `UserProfileCreationRequestedEvent`: Para setup inicial

## 📊 **Error Handling Strategy**

### **Domain Error Categories:**
```csharp
// Validation Errors (400 Bad Request)
"Validation failed: {specific domain errors}"

// Business Rule Violations (422 Unprocessable Entity)  
"User already exists in this tenant"
"Tenant not found"
"Tenant is not active"

// Infrastructure Errors (500 Internal Server Error)
"Error creating user account"
"An unexpected error occurred during registration"
```

### **Error Recovery:**
- Non-critical errors não impedem registro
- Operações post-registration são resilientes
- Audit logs mantidos mesmo em falhas
- Cleanup de recursos em caso de falha

## 🎯 **Performance Considerations**

### **Async Operations:**
```csharp
// Todas operações I/O são assíncronas:
await _tenantRepository.GetByIdAsync(tenantId, cancellationToken);
await _userManager.FindByEmailAsync(normalizedEmail);  
await _userManager.CreateAsync(user, password);
```

### **Resource Management:**
- Proper disposal de recursos
- CancellationToken support
- Efficient memory usage
- Database connection optimization

### **Caching Strategy (Future):**
- Tenant information caching
- User lookup optimization
- Configuration caching

## 📝 **Changelog DDD + Clean + SOLID**

### **Versão Atual (2.0):**
- ✅ **DDD Implementation**: Application Service com orchestração de domínio
- ✅ **Clean Architecture**: Separação clara de responsabilidades
- ✅ **SOLID Compliance**: Todos os princípios implementados
- ✅ **Domain Validation**: Validações de regras de negócio
- ✅ **Aggregate Coordination**: Gestão de User e Tenant aggregates
- ✅ **Security Multi-layer**: Segurança em múltiplas camadas
- ✅ **Structured Logging**: Observabilidade completa
- ✅ **Error Handling**: Tratamento robusto de erros

### **Architectural Improvements:**
- Method decomposition for single responsibility
- Domain validation extraction
- Business workflow implementation
- Post-registration operations framework
- Comprehensive error categorization
- Security-focused logging
- Infrastructure independence

### **Business Logic Enhancements:**
- Multi-tenant context validation
- User uniqueness business rules
- Entity creation with domain rules
- Audit trail implementation
- Future domain events preparation

---
**Data da Última Atualização:** 05/09/2025  
**Versão:** 2.0 (DDD + Clean Architecture + SOLID)  
**Status:** ✅ Produção Ready  
**Architecture:** 🏛️ DDD + Clean + SOLID Compliant  
**Pattern:** 🎯 Application Service + Command Handler
