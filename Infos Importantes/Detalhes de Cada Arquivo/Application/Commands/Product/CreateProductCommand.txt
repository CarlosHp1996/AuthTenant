# 📋 Documentação: CreateProductCommand.cs

## 🎯 **Objetivo**
Record imutável que representa um comando de criação de produto no sistema. Encapsula dados de produto, validações de domínio e regras de negócio. Implementa princípios DDD, Clean Architecture e SOLID para gerenciamento de produtos.

## 🔧 **Funcionalidades Principais**

### **1. Domain-Driven Design (DDD)**
- ✅ **Command Pattern**: Implementação correta do padrão CQRS
- ✅ **Value Object**: Record imutável com validações de domínio
- ✅ **Business Rules**: Validações específicas do domínio de produto
- ✅ **Ubiquitous Language**: Terminologia consistente do e-commerce

### **2. Clean Architecture Compliance**
- ✅ **Application Layer**: Posicionamento correto na arquitetura
- ✅ **Dependency Direction**: Não depende de camadas externas
- ✅ **Interface Segregation**: Implementa IRequest específico
- ✅ **Single Responsibility**: Foco exclusivo em dados de criação de produto

### **3. SOLID Principles**
- ✅ **Single Responsibility**: Responsabilidade única de representar comando de produto
- ✅ **Open/Closed**: Extensível via métodos adicionais, fechado para modificação
- ✅ **Liskov Substitution**: Compatível com IRequest<Result<ProductDto>>
- ✅ **Interface Segregation**: Usa interfaces específicas e necessárias
- ✅ **Dependency Inversion**: Não depende de implementações concretas

### **4. Validação Avançada de Domínio**
- ✅ **Data Annotations**: Validação automática de entrada
- ✅ **Business Rules Validation**: Validações específicas de e-commerce
- ✅ **Price Validation**: Regras rigorosas de preços
- ✅ **SKU Format Validation**: Padrões de códigos de produto
- ✅ **Stock Management Rules**: Validação de estoque

### **5. Normalização e Consistência**
- ✅ **Data Normalization**: Campos normalizados para processamento
- ✅ **SKU Standardization**: SKU em maiúsculo para consistência
- ✅ **Text Trimming**: Remoção de espaços desnecessários
- ✅ **Secure Logging**: ToString() seguro para logs

## 🏗️ **Arquitetura DDD**

### **Domain Model:**
```csharp
public sealed record CreateProductCommand : IRequest<Result<ProductDto>>
{
    // Product Identity
    string Name         // Nome do produto (identificador de negócio)
    string? SKU         // Código de produto (identificador único)
    
    // Product Information  
    string? Description // Descrição detalhada do produto
    decimal Price       // Preço do produto (valor monetário)
    int StockQuantity   // Quantidade em estoque (gestão de inventário)
}
```

### **Domain Properties:**
- `NormalizedName`: Nome processado para consistência
- `NormalizedSKU`: SKU em maiúsculo padronizado
- `NormalizedDescription`: Descrição sem espaços extras
- `HasDescription`: Indica se produto tem descrição
- `HasSKU`: Indica se produto tem código SKU
- `IsInStock`: Indica se produto tem estoque inicial

### **Domain Methods:**
- `IsValid()`: Validação de regras de negócio
- `GetValidationResult()`: Resultado detalhado de validação
- Business-specific private validators

## 📊 **Validações de Domínio**

### **Product Name Business Rules:**
```
✅ Required: Obrigatório para identificação
✅ Length: Entre 2 e 200 caracteres
✅ Characters: Letras, números, espaços, alguns símbolos permitidos
✅ Pattern: Regex para caracteres seguros (@"^[a-zA-Z0-9\s\-_.'""()&/]+$")
✅ Normalization: Trim de espaços e validação
```

### **Price Business Rules:**
```
✅ Required: Obrigatório para transações
✅ Range: Entre 0.01 e 999,999.99
✅ Precision: Máximo 2 casas decimais
✅ Positive: Deve ser valor positivo
✅ Business Logic: Prevenção de preços zero ou negativos
```

### **SKU (Stock Keeping Unit) Rules:**
```
✅ Optional: Pode ser nulo ou vazio
✅ Length: Máximo 50 caracteres
✅ Format: Apenas letras maiúsculas, números, hífens e underscores
✅ Pattern: Regex (@"^[A-Z0-9\-_]*$")
✅ Uniqueness: Validado no handler (regra de negócio)
```

### **Stock Quantity Rules:**
```
✅ Required: Obrigatório para gestão de estoque
✅ Range: Não-negativo (0 ou maior)
✅ Business Logic: Zero indica "sem estoque inicial"
✅ Validation: Suporte a produtos sem estoque inicial
```

### **Description Rules:**
```
✅ Optional: Pode ser nulo ou vazio
✅ Length: Máximo 1000 caracteres
✅ Content: Aceita qualquer texto válido
✅ Normalization: Trim de espaços desnecessários
```

## 🔒 **Validações de Negócio Avançadas**

### **Price Validation (Domain-Specific):**
```csharp
private bool IsPriceValid()
{
    return Price > 0 &&                    // Positive value
           Price <= 999999.99m &&          // Business limit
           Math.Round(Price, 2) == Price;  // Max 2 decimal places
}
```

### **Name Validation (Business Rules):**
```csharp
private bool IsNameValid()
{
    return !string.IsNullOrWhiteSpace(Name) &&
           Name.Trim().Length >= 2 &&          // Min length
           Name.Length <= 200 &&               // Max length
           !Name.Trim().StartsWith(' ') &&     // No leading spaces
           !Name.Trim().EndsWith(' ');         // No trailing spaces
}
```

### **SKU Format Validation:**
```csharp
private bool IsSKUValid()
{
    if (string.IsNullOrWhiteSpace(SKU))
        return true; // Optional field
        
    var normalizedSKU = SKU.Trim().ToUpperInvariant();
    return normalizedSKU.Length <= 50 &&
           normalizedSKU.All(c => char.IsLetterOrDigit(c) || c == '-' || c == '_');
}
```

## 🎮 **Uso e Integração DDD**

### **Command Creation (Application Layer):**
```csharp
var createProductCommand = new CreateProductCommand(
    Name: "Premium Wireless Headphones",
    Description: "High-quality wireless headphones with noise cancellation",
    Price: 299.99m,
    SKU: "PWH-001",
    StockQuantity: 50
);
```

### **Domain Validation:**
```csharp
// Business rules validation
if (!createProductCommand.IsValid())
{
    var validationResult = createProductCommand.GetValidationResult();
    // Handle domain validation errors
}

// Access normalized data
var normalizedName = createProductCommand.NormalizedName;
var normalizedSKU = createProductCommand.NormalizedSKU;
bool hasDescription = createProductCommand.HasDescription;
```

### **Integration with Handler:**
```csharp
// Command é processado pelo CreateProductHandler
// seguindo princípios de separação de responsabilidades
var result = await mediator.Send(createProductCommand);
```

## 📈 **Domain Properties Benefits**

### **Normalized Properties:**
```csharp
// Original: "  Premium Headphones  "
NormalizedName: "Premium Headphones"

// Original: "  pwh-001  "
NormalizedSKU: "PWH-001"

// Original: "  Great product...  "
NormalizedDescription: "Great product..."
```

### **Business Indicators:**
```csharp
HasDescription: true/false   // Business logic for description requirement
HasSKU: true/false          // Business logic for SKU requirement  
IsInStock: true/false       // Business logic for initial stock status
```

## 🔒 **Segurança e Logging**

### **Secure Logging:**
```csharp
// ToString() implementation for safe logging:
"CreateProductCommand(Name=Premium Headphones, Price=$299.99, SKU=PWH-001, Stock=50)"
// Não expõe dados sensíveis, inclui informações de auditoria
```

### **Input Sanitization:**
- Name normalization para consistência
- SKU uppercase conversion
- Description trimming
- Price precision control

## 🧪 **Testabilidade DDD**

### **Unit Testing Scenarios:**
```csharp
// Testes de validação de domínio
[Fact] ValidProduct_ShouldPass()
[Fact] InvalidProductName_ShouldFail()
[Fact] NegativePrice_ShouldFail()
[Fact] InvalidSKUFormat_ShouldFail()
[Fact] NegativeStock_ShouldFail()
[Fact] NormalizedSKU_ShouldBeUppercase()
[Fact] NormalizedName_ShouldBeTrimmed()
[Fact] ValidationResult_ShouldContainSpecificErrors()
[Fact] OptionalFields_ShouldHandleNullValues()
```

### **Domain Testing Benefits:**
- Isolamento das regras de negócio
- Testes rápidos sem dependências
- Cobertura completa de cenários
- Validação de comportamento de domínio

## 🚀 **Performance e Otimização**

### **Memory Efficiency:**
- Record structure para eficiência
- String interning para nomes comuns
- Lazy validation com IsValid()
- Minimal object allocation

### **Validation Performance:**
```csharp
// Validação otimizada com short-circuit
private bool IsValid() => 
    IsNameValid() &&      // Exit early if name invalid
    IsPriceValid() &&     // Exit early if price invalid
    IsStockQuantityValid() &&
    IsSKUValid() &&
    IsDescriptionValid();
```

## 📝 **ProductValidationResult Value Object**

### **Design Principles:**
```csharp
public sealed record ProductValidationResult(bool IsValid, IReadOnlyList<string> Errors);
```

### **Benefits:**
- Immutable result structure
- Type-safe error collection
- Clear success/failure indication
- Detailed error information for UI

## 📈 **Business Value**

### **E-commerce Domain:**
- Product catalog management
- Inventory control foundation
- Price management rules
- SKU standardization
- Stock tracking preparation

### **Domain Events (Future):**
- ProductCreationRequested
- PriceValidated
- SKUAssigned
- InitialStockSet

## 📝 **Changelog DDD Implementation**

### **Versão Atual (2.0):**
- ✅ **DDD Implementation**: Command pattern com regras de e-commerce
- ✅ **Clean Architecture**: Posicionamento correto na camada Application
- ✅ **SOLID Compliance**: Todos os princípios implementados
- ✅ **Domain Validation**: Validações específicas de produto
- ✅ **Value Objects**: Properties derivadas para normalização
- ✅ **Business Logic**: Regras de preço, SKU e estoque
- ✅ **Ubiquitous Language**: Terminologia de e-commerce
- ✅ **Security Policy**: Validação de entrada e logging seguro

### **Product Domain Improvements:**
- Advanced price validation with precision control
- SKU format standardization and validation
- Product name sanitization and validation
- Stock quantity business rules
- Comprehensive error reporting
- Secure logging for audit trail

### **Architectural Benefits:**
- Complete DDD implementation for product domain
- Clean Architecture compliance
- SOLID principles adherence
- Enhanced testability for product logic
- Improved maintainability
- Domain integrity protection

---
**Data da Última Atualização:** 05/09/2025  
**Versão:** 2.0 (DDD + Clean Architecture + SOLID)  
**Status:** ✅ Produção Ready  
**Domain:** 🛍️ E-commerce Product Management  
**Architecture:** 🏛️ DDD + Clean + SOLID Compliant
