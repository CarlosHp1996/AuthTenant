🔄 UPDATEPRODUCTCOMMAND.CS - DOCUMENTATION

================================================================================
🎯 PURPOSE & OVERVIEW
================================================================================

The UpdateProductCommand represents a request to update an existing product in a multi-tenant e-commerce API. This command follows CQRS principles, Domain-Driven Design (DDD), and implements comprehensive validation to ensure data integrity and business rule compliance for product modification operations.

📋 Key Responsibilities:
- Encapsulate product update request data with all fields
- Implement comprehensive input validation using Data Annotations
- Provide domain-level validation methods for business rules
- Support MediatR command handling pattern with ProductDto response
- Ensure type safety and data integrity for product updates

================================================================================
🏗️ ARCHITECTURE & DESIGN PATTERNS
================================================================================

🔧 Design Patterns Implemented:
- Command Pattern: CQRS command for product updates
- Value Object Pattern: Immutable record structure
- Validation Pattern: Multi-layer validation approach
- Builder Pattern: Available through record structure

🧱 Clean Architecture Layers:
- Application Layer: Contains this command
- Domain Layer: Business rule validation
- Presentation Layer: Controller creates commands
- Infrastructure Layer: Handler processes commands

🎭 Domain-Driven Design:
- Business rule validation at command level
- Immutable data structure for thread safety
- Rich validation methods with detailed feedback
- Clear business intent with comprehensive data

================================================================================
🔍 CODE STRUCTURE & IMPLEMENTATION
================================================================================

📦 Command Properties:
- Id (Guid): The unique identifier of the product to update
- Name (string): Updated product name with length validation
- Description (string?): Updated product description (optional)
- Price (decimal): Updated product price with range validation
- SKU (string?): Updated product SKU (optional)
- StockQuantity (int): Updated stock quantity with range validation
- IsActive (bool): Updated product active status
- ProductIdString (string): Safe string representation for logging

🔄 Validation Methods:
- IsValid(): Quick boolean validation check
- GetValidationResult(): Detailed validation with error messages
- ToString(): Safe string conversion for logging and debugging

🛡️ Validation Rules:
- Required fields: Id, Name, Price, StockQuantity
- Length constraints: Name (1-200), Description (max 2000), SKU (max 50)
- Range constraints: Price (> 0), StockQuantity (≥ 0)
- Business rules: No empty GUIDs, meaningful price limits

================================================================================
📊 SECURITY & VALIDATION
================================================================================

🔒 Security Measures:
- Input sanitization through comprehensive validation
- Safe ToString() implementation with truncation
- No sensitive data exposure in logs
- Immutable record structure prevents tampering

✅ Validation Layers:
1. **Data Annotations**: Comprehensive attribute validation
2. **Domain Validation**: Custom IsValid() method
3. **Business Rules**: Price and stock quantity constraints
4. **Type Safety**: Strong typing with appropriate data types

🛠️ Data Protection:
- Truncated data in string representations
- Controlled data exposure through properties
- Safe error messages for client consumption
- Input sanitization and trimming

================================================================================
📈 PERFORMANCE & SCALABILITY
================================================================================

⚡ Performance Features:
- Lightweight record structure with minimal overhead
- Efficient validation methods with early returns
- Fast ToString() implementation with StringBuilder
- Optimized string operations with length checks

🔄 Scalability Considerations:
- Immutable design prevents side effects
- Thread-safe by design
- No external dependencies in validation
- Stateless validation logic

📊 Memory Management:
- Value semantics with records
- Efficient string building for logging
- Minimal object allocation
- Garbage collection friendly

================================================================================
🧪 TESTING STRATEGY
================================================================================

🔬 Unit Testing Approach:
- Test all validation scenarios
- Test boundary conditions for lengths and ranges
- Test null and empty value handling
- Test ToString() safety and formatting

📋 Test Categories:
- Valid update commands with all scenarios
- Invalid field combinations
- Boundary value testing
- Business rule validation
- Edge cases and error conditions

🛡️ Integration Testing:
- Command creation in controllers
- Handler processing with validation
- End-to-end update workflows
- Multi-tenant data isolation

================================================================================
⚙️ CONFIGURATION & DEPENDENCIES
================================================================================

📦 Required NuGet Packages:
- System.ComponentModel.DataAnnotations: Validation attributes
- MediatR: Command interface implementation
- .NET 8 BCL: Record types and validation support

🔧 Framework Dependencies:
- IRequest<Result<ProductDto>>: MediatR command interface
- Data Annotations: Built-in validation framework
- Record types: C# 9+ language feature

🎛️ Configuration Options:
- Validation rules can be extended
- Error messages support localization
- Business constraints can be configured
- Logging format can be customized

================================================================================
🚀 USAGE EXAMPLES
================================================================================

💼 Creating Command in Controller:
```csharp
[HttpPut("{id}")]
public async Task<IActionResult> UpdateProduct(Guid id, UpdateProductRequest request)
{
    var command = new UpdateProductCommand(
        id,
        request.Name,
        request.Description,
        request.Price,
        request.SKU,
        request.StockQuantity,
        request.IsActive
    );
    
    if (!command.IsValid())
    {
        return BadRequest("Invalid product data");
    }
    
    var result = await _mediator.Send(command);
    return result.IsSuccess ? Ok(result.Data) : BadRequest(result.Error);
}
```

🔧 Validation Usage:
```csharp
var command = new UpdateProductCommand(/* parameters */);
var validationResult = command.GetValidationResult();

if (!validationResult.IsValid)
{
    foreach (var error in validationResult.Errors)
    {
        _logger.LogWarning("Validation error: {Error}", error);
    }
    return BadRequest(validationResult.Errors);
}
```

🔍 Safe Logging:
```csharp
_logger.LogInformation("Processing update: {Command}", command);
// Outputs: Processing update: UpdateProduct(ID: abc123..., Name: 'Product Name...', Price: $99.99, Stock: 100, Active: True)
```

================================================================================
📝 MAINTENANCE & BEST PRACTICES
================================================================================

🎯 Code Quality Standards:
- XML documentation for all public members
- Comprehensive validation logic with clear messages
- Safe string representations with truncation
- Immutable data structure design

🔄 Maintenance Guidelines:
- Keep validation rules synchronized with business requirements
- Update documentation when adding new validation
- Maintain backward compatibility in command structure
- Add comprehensive tests for new validation scenarios

⚠️ Common Pitfalls to Avoid:
- Don't expose sensitive data in ToString()
- Don't modify validation without updating tests
- Don't bypass validation in handlers
- Don't use mutable structures for commands

================================================================================
🔮 FUTURE ENHANCEMENTS
================================================================================

🎯 Planned Improvements:
- Enhanced business rule validations
- Custom validation attributes for specific rules
- Fluent validation integration
- Localized error messaging

🔧 Extensibility Points:
- Custom validation attribute support
- Configurable validation rules
- Enhanced audit logging
- Additional safety checks

📊 Monitoring Enhancements:
- Validation metrics collection
- Command usage analytics
- Performance monitoring
- Error rate tracking

================================================================================
📚 RELATED DOCUMENTATION
================================================================================

🔗 Related Files:
- UpdateProductHandler.cs: Processes this command
- Product.cs: Domain entity being updated
- ProductController.cs: Creates and sends commands
- ProductDto.cs: Response data transfer object
- Result.cs: Return type wrapper

📖 Additional Resources:
- CQRS command pattern documentation
- Data Annotations validation guide
- MediatR command handling patterns
- Domain-Driven Design principles

================================================================================
🏷️ METADATA
================================================================================

📅 Created: September 5, 2025
🔄 Last Updated: September 5, 2025
👤 Maintainer: Development Team
📊 Complexity: Medium
🎯 Purpose: Product update command definition
🏗️ Pattern: CQRS Command
🔒 Security Level: Validated Input
📈 Performance: Optimized for comprehensive updates
