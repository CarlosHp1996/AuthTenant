=========================================================
LOGINCOMMANDVALIDATOR.CS - DOCUMENTAÇÃO TÉCNICA
=========================================================

VISÃO GERAL:
-----------
Validator enterprise para comandos de login com validações de segurança abrangentes.
Implementa validação robusta de credenciais de autenticação para sistemas multi-tenant.
Parte do sistema de autenticação e autorização da aplicação.

LOCALIZAÇÃO:
-----------
📁 AuthTenant.Application/Validators/Auth/LoginCommandValidator.cs

DEPENDÊNCIAS:
------------
✅ FluentValidation - Framework de validação
✅ AuthTenant.Application.Commands.Auth.LoginCommand - Comando de login
✅ System.Text.RegularExpressions - Validações regex
✅ System.Globalization - Formatação de dados

RESPONSABILIDADES:
-----------------
🔸 Validação robusta de email
🔸 Validação de complexidade de senha
🔸 Validação de formato de tenant ID
🔸 Segurança contra ataques de injeção
🔸 Validação de domínios de email permitidos
🔸 Verificação de políticas de senha enterprise

VALIDAÇÕES IMPLEMENTADAS:
------------------------

1. EMAIL:
   ✅ Obrigatório e não nulo
   ✅ Formato de email válido (regex RFC 5322)
   ✅ Comprimento máximo de 254 caracteres
   ✅ Domínio de email válido
   ✅ Verificação contra lista de domínios proibidos
   ✅ Detecção de emails temporários/descartáveis
   ✅ Validação de caracteres especiais permitidos
   ✅ Prevenção de SQL injection em campos de email

2. SENHA:
   ✅ Obrigatória e não nula
   ✅ Comprimento mínimo de 8 caracteres
   ✅ Comprimento máximo de 128 caracteres
   ✅ Pelo menos uma letra maiúscula
   ✅ Pelo menos uma letra minúscula
   ✅ Pelo menos um número
   ✅ Pelo menos um caractere especial
   ✅ Sem espaços em branco
   ✅ Não pode ser uma senha comum/vulnerável
   ✅ Verificação contra padrões sequenciais

3. TENANT ID:
   ✅ Obrigatório quando fornecido
   ✅ Formato de GUID válido
   ✅ Não pode ser GUID vazio
   ✅ Validação de integridade do tenant

CONSTANTES DE VALIDAÇÃO:
-----------------------
📊 MAX_EMAIL_LENGTH = 254 caracteres
📊 MIN_PASSWORD_LENGTH = 8 caracteres
📊 MAX_PASSWORD_LENGTH = 128 caracteres
📊 EMAIL_PATTERN = Regex RFC 5322 compliant
📊 PASSWORD_PATTERN = Complexidade enterprise

CÓDIGOS DE ERRO PERSONALIZADOS:
------------------------------
❌ LOGIN_EMAIL_REQUIRED - Email obrigatório
❌ LOGIN_EMAIL_FORMAT - Formato de email inválido
❌ LOGIN_EMAIL_LENGTH - Comprimento de email inválido
❌ LOGIN_EMAIL_DOMAIN - Domínio não permitido
❌ LOGIN_EMAIL_DISPOSABLE - Email temporário detectado
❌ LOGIN_PASSWORD_REQUIRED - Senha obrigatória
❌ LOGIN_PASSWORD_LENGTH - Comprimento de senha inválido
❌ LOGIN_PASSWORD_COMPLEXITY - Complexidade insuficiente
❌ LOGIN_PASSWORD_WHITESPACE - Espaços não permitidos
❌ LOGIN_PASSWORD_COMMON - Senha muito comum
❌ LOGIN_TENANT_REQUIRED - Tenant ID obrigatório
❌ LOGIN_TENANT_FORMAT - Formato de tenant inválido

MÉTODOS DE VALIDAÇÃO CUSTOMIZADOS:
---------------------------------

🔧 BeValidEmailFormat(string email)
   - Valida formato completo de email
   - Verifica sintaxe RFC 5322
   - Detecta caracteres especiais inválidos

🔧 BeValidEmailDomain(string email)
   - Valida domínio do email
   - Verifica DNS do domínio
   - Bloqueia domínios maliciosos conhecidos

🔧 NotBeDisposableEmail(string email)
   - Detecta emails temporários/descartáveis
   - Verifica contra lista de provedores temporários
   - Melhora segurança de registro

🔧 NotContainSqlInjection(string input)
   - Detecta tentativas de SQL injection
   - Verifica padrões maliciosos
   - Protege contra ataques de injeção

🔧 MeetPasswordComplexity(string password)
   - Verifica complexidade completa da senha
   - Valida regras enterprise de senha
   - Confirma presença de caracteres obrigatórios

🔧 NotBeCommonPassword(string password)
   - Verifica contra lista de senhas comuns
   - Detecta padrões sequenciais
   - Previne uso de senhas vulneráveis

🔧 BeValidGuid(Guid? tenantId)
   - Valida formato de GUID
   - Verifica se não é GUID vazio
   - Confirma integridade do tenant

FUNCIONALIDADES DE SEGURANÇA:
-----------------------------
🔒 Prevenção de SQL Injection
🔒 Detecção de emails descartáveis
🔒 Validação de domínios DNS
🔒 Verificação de senhas comprometidas
🔒 Normalização de dados de entrada
🔒 Códigos de erro não informativos para atacantes

CONFIGURAÇÃO INTERNACIONAL:
--------------------------
🌐 Suporte a mensagens em português (pt-BR)
🌐 Suporte a mensagens em inglês (en-US)
🌐 Configuração dinâmica de cultura
🌐 Formatação localizada de mensagens

PADRÕES ARQUITETURAIS:
---------------------
🏗️ Clean Architecture - Separação clara de responsabilidades
🏗️ DDD (Domain-Driven Design) - Validação de domínio
🏗️ SOLID Principles - Single Responsibility
🏗️ Fail-Fast - Validação em cascata
🏗️ Security by Design - Validações de segurança

INTEGRAÇÃO COM SISTEMA:
----------------------
🔗 MediatR Pipeline - Execução automática
🔗 AuthController - Validação de login
🔗 Exception Middleware - Tratamento de erros
🔗 Logging Behavior - Auditoria de tentativas

CENÁRIOS DE TESTE RECOMENDADOS:
------------------------------
✅ Email válido com senha forte
✅ Email inválido (formato incorreto)
✅ Email com domínio inexistente
✅ Email descartável/temporário
✅ Senha muito simples
✅ Senha sem complexidade suficiente
✅ Senha com espaços em branco
✅ Senha muito longa
✅ Tenant ID inválido ou vazio
✅ Tentativas de SQL injection
✅ Caracteres especiais maliciosos

PERFORMANCE:
-----------
⚡ Validação em cascata otimizada
⚡ Regex compilada para performance
⚡ Cache de domínios válidos
⚡ Verificação rápida de senhas comuns

MANUTENÇÃO:
----------
🔧 Lista de senhas comuns atualizável
🔧 Lista de domínios descartáveis expansível
🔧 Padrões de validação configuráveis
🔧 Códigos de erro personalizáveis

CONSIDERAÇÕES DE SEGURANÇA:
--------------------------
⚠️ Não logar senhas ou dados sensíveis
⚠️ Usar códigos de erro genéricos publicamente
⚠️ Atualizar listas de senhas comprometidas
⚠️ Monitorar tentativas de login maliciosas

EXEMPLO DE USO:
--------------
```csharp
var validator = new LoginCommandValidator();
var command = new LoginCommand("user@domain.com", "SecurePass123!", tenantId);
var result = validator.Validate(command);

if (!result.IsValid)
{
    // Processar erros de validação
    foreach (var error in result.Errors)
    {
        Console.WriteLine($"{error.ErrorCode}: {error.ErrorMessage}");
    }
}
```

VERSIONAMENTO:
-------------
📋 Versão: 2.0.0
📋 Última Atualização: 2024
📋 Compatibilidade: .NET 8+
📋 Status: Produção

AUTOR & RESPONSÁVEL:
-------------------
👨‍💻 Desenvolvido por: Equipe AuthTenant
👨‍💻 Mantido por: Time de Segurança
📧 Contato: security@AuthTenant.com

=========================================================
