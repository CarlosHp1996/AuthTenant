# 📋 Documentação: LoggingBehavior.cs

## 🎯 **Objetivo**
MediatR pipeline behavior responsável por logging estruturado, métricas de performance e observabilidade de requisições.

## 🔧 **Funcionalidades Principais**

### **1. Logging Estruturado**
- ✅ Logs categorizados com emojis visuais (🚀, ✅, ❌, ⚠️)
- ✅ Informações contextuais completas (RequestId, Timestamp, Type)
- ✅ Scopes estruturados para correlação de logs
- ✅ Serialização segura de payloads (desenvolvimento)

### **2. Métricas de Performance**
- ✅ Categorização automática: Fast (<100ms), Normal (100ms-1s), Slow (1s-5s), VerySlow (>5s)
- ✅ Alertas automáticos para requisições lentas
- ✅ Métricas detalhadas de duração
- ✅ Thresholds configuráveis por categoria

### **3. Contexto de Execução**
- ✅ Identificação de Commands vs Queries
- ✅ RequestId único para rastreamento
- ✅ Namespace e tipo de requisição
- ✅ Timestamp preciso de execução

### **4. Tratamento de Exceções**
- ✅ Logging especializado por tipo de exceção
- ✅ Context logging para ValidationException (FluentValidation)
- ✅ Informações detalhadas de falhas
- ✅ Preservação do stack trace

### **5. Segurança e Compliance**
- ✅ Mascaramento de dados sensíveis em logs
- ✅ Logs condicionais baseados em nível (Debug/Production)
- ✅ Sanitização de payloads
- ✅ Controle de verbosidade por ambiente

## 🏗️ **Arquitetura**

### **Classes Principais:**
- `LoggingBehavior<TRequest, TResponse>`: Behavior principal
- `RequestExecutionContext`: Contexto de execução
- `RequestPerformanceCategory`: Enum de categorização
- `DisposableScope`: Scope para logging estruturado

### **Dependências:**
- `MediatR`: Pipeline behavior
- `Microsoft.Extensions.Logging`: Logging estruturado
- `System.Text.Json`: Serialização de payloads

## 📊 **Métricas e Performance**

### **Categorias de Performance:**
```
Fast: < 100ms (LogLevel.Information)
Normal: 100ms - 1s (LogLevel.Information)
Slow: 1s - 5s (LogLevel.Warning)
VerySlow: > 5s (LogLevel.Warning)
```

### **Logs Estruturados:**
- Request Start: Nome, ID, Tipo, Timestamp
- Request Success: Duração, Categoria, Response
- Request Failure: Exception, Duração, Context
- Performance Alerts: Requests lentas com thresholds

## 🔒 **Segurança**

### **Proteção de Dados:**
- Mascaramento automático de campos sensíveis
- Logs de payload apenas em desenvolvimento
- Sanitização de informações críticas
- Controle de nível por ambiente

### **Campos Protegidos:**
- Passwords, Tokens, API Keys
- Dados pessoais sensíveis
- Informações de autenticação
- Payloads em produção

## 🎮 **Configuração**

### **Registro no DI:**
```csharp
services.AddTransient(typeof(IPipelineBehavior<,>), typeof(LoggingBehavior<,>));
```

### **Configuração de Logging:**
```json
{
  "Logging": {
    "LogLevel": {
      "AuthTenant.Application.Behaviors.LoggingBehavior": "Debug"
    }
  }
}
```

## 📈 **Monitoramento**

### **Métricas Coletadas:**
- Duração de requisições
- Taxa de sucesso/falha
- Contadores por tipo de request
- Alertas de performance

### **Correlação:**
- RequestId único por request
- Scopes estruturados
- Timestamps precisos
- Context completo

## 🧪 **Testabilidade**

### **Pontos de Teste:**
- Mock de ILogger para verificar logs
- Simulação de diferentes durações
- Teste de categorização de performance
- Validação de context creation

### **Cenários de Teste:**
- Requests rápidas vs lentas
- Exceções de validação
- Falhas inesperadas
- Serialização de payloads

## 🚀 **Benefícios**

### **Observabilidade:**
- Rastreamento completo de requisições
- Debugging facilitado com logs estruturados
- Métricas automáticas de performance
- Alertas proativos para problemas

### **Manutenibilidade:**
- Código limpo e bem documentado
- Separação clara de responsabilidades
- Extensibilidade para novos tipos de log
- Configuração flexível

### **Performance:**
- Logging assíncrono
- Serialização condicional
- Scopes otimizados
- Overhead mínimo

## 📝 **Changelog**

### **Versão Atual:**
- ✅ Refatoração completa para logging estruturado
- ✅ Implementação de métricas de performance
- ✅ Segurança e mascaramento de dados
- ✅ Documentação XML completa
- ✅ Testes de compatibilidade com FluentValidation

### **Melhorias Implementadas:**
- Performance categorization automática
- Context logging estruturado
- Exception handling especializado
- Security e compliance features
- Observability completa

---
**Data da Última Atualização:** 05/09/2025  
**Versão:** 2.0 (Refatorada)  
**Status:** ✅ Produção Ready
