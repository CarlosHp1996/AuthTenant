# ITokenService.cs - Documenta√ß√£o T√©cnica

## üìã Vis√£o Geral
A interface `ITokenService` define os contratos para servi√ßos enterprise de gera√ß√£o, valida√ß√£o e manipula√ß√£o de tokens JWT. Projetada para suportar opera√ß√µes seguras de autentica√ß√£o em sistemas multi-tenant com padr√µes modernos de seguran√ßa e observabilidade.

## üèóÔ∏è Arquitetura e Design

### Padr√µes Implementados
- **Interface Segregation Principle (ISP)**: Interface espec√≠fica para opera√ß√µes de token
- **Dependency Inversion Principle (DIP)**: Abstra√ß√£o para invers√£o de depend√™ncias
- **Result Pattern**: Retorno consistente com controle de erro
- **Async/Await Pattern**: Opera√ß√µes ass√≠ncronas para melhor performance
- **Legacy Support Pattern**: Manuten√ß√£o de compatibilidade retroativa

### Princ√≠pios SOLID
- **SRP**: Responsabilidade √∫nica para opera√ß√µes de token JWT
- **OCP**: Extens√≠vel para novos tipos de opera√ß√µes de token
- **LSP**: Contratos claros para implementa√ß√µes substitu√≠veis
- **ISP**: Interface espec√≠fica sem m√©todos desnecess√°rios
- **DIP**: Abstra√ß√£o pura sem depend√™ncias concretas

## üîß Contratos de M√©todos

### M√©todos Principais (Modernos)

#### GenerateJwtTokenAsync
```csharp
Task<Result<string>> GenerateJwtTokenAsync(ApplicationUser user, CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Gera token JWT seguro para autentica√ß√£o  
**Entrada**: Usu√°rio validado e token de cancelamento  
**Retorno**: Result contendo o token JWT ou erro  
**Exce√ß√µes**: ArgumentNullException, InvalidOperationException

#### GetPrincipalFromExpiredTokenAsync
```csharp
Task<Result<ClaimsPrincipal>> GetPrincipalFromExpiredTokenAsync(string token, CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Extrai claims de token expirado para refresh  
**Entrada**: Token JWT expirado  
**Retorno**: Result contendo ClaimsPrincipal ou erro  
**Exce√ß√µes**: ArgumentNullException, SecurityTokenException

#### ValidateTokenAsync
```csharp
Task<Result<ClaimsPrincipal>> ValidateTokenAsync(string token, CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Valida token JWT ativo com verifica√ß√£o completa  
**Entrada**: Token JWT para valida√ß√£o  
**Retorno**: Result contendo ClaimsPrincipal v√°lido ou erro  
**Exce√ß√µes**: ArgumentNullException, SecurityTokenValidationException

#### GenerateRefreshTokenAsync
```csharp
Task<Result<string>> GenerateRefreshTokenAsync(CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Gera refresh token criptograficamente seguro  
**Entrada**: Token de cancelamento (opcional)  
**Retorno**: Result contendo refresh token ou erro  
**Seguran√ßa**: Usa RandomNumberGenerator para m√°xima entropia

### M√©todos de Extra√ß√£o de Claims

#### GetTenantIdFromTokenAsync
```csharp
Task<Result<string>> GetTenantIdFromTokenAsync(string token, CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Extrai ID do tenant para opera√ß√µes multi-tenant  
**Entrada**: Token JWT v√°lido  
**Retorno**: Result contendo tenant ID ou erro  
**Multi-tenancy**: Suporte completo a isolamento de dados

#### GetUserIdFromTokenAsync
```csharp
Task<Result<string>> GetUserIdFromTokenAsync(string token, CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Extrai ID do usu√°rio do token  
**Entrada**: Token JWT v√°lido  
**Retorno**: Result contendo user ID ou erro  
**Identifica√ß√£o**: Claim padr√£o NameIdentifier

#### IsTokenExpiredAsync
```csharp
Task<Result<bool>> IsTokenExpiredAsync(string token, CancellationToken cancellationToken = default);
```
**Prop√≥sito**: Verifica expira√ß√£o sem valida√ß√£o completa  
**Entrada**: Token JWT para verifica√ß√£o  
**Retorno**: Result contendo status de expira√ß√£o  
**Performance**: Verifica√ß√£o r√°pida sem valida√ß√£o custosa

### M√©todos Legacy (Compatibilidade)

#### GenerateJwtToken (OBSOLETO)
```csharp
[Obsolete("Use GenerateJwtTokenAsync para melhor controle de erro e opera√ß√µes ass√≠ncronas.", false)]
string GenerateJwtToken(ApplicationUser user);
```
**Status**: Marcado como obsoleto, mantido para compatibilidade  
**Migra√ß√£o**: Usar GenerateJwtTokenAsync  
**Limita√ß√µes**: Sem controle de erro, opera√ß√£o s√≠ncrona

#### GetPrincipalFromExpiredToken (OBSOLETO)
```csharp
[Obsolete("Use GetPrincipalFromExpiredTokenAsync para melhor controle de erro e opera√ß√µes ass√≠ncronas.", false)]
ClaimsPrincipal? GetPrincipalFromExpiredToken(string token);
```
**Status**: Marcado como obsoleto, mantido para compatibilidade  
**Migra√ß√£o**: Usar GetPrincipalFromExpiredTokenAsync  
**Limita√ß√µes**: Sem controle de erro, retorno nullable

## üîí Aspectos de Seguran√ßa

### Valida√ß√µes de Entrada
- **Null Checks**: Valida√ß√£o rigorosa de par√¢metros nulos
- **Token Format**: Verifica√ß√£o de formato JWT (3 partes)
- **Algorithm Validation**: Apenas algoritmos seguros (HMAC-SHA256)
- **Tenant Isolation**: Verifica√ß√£o de tenant em multi-tenancy

### Pr√°ticas de Seguran√ßa
- **Secure Claims**: Claims padronizados e seguros
- **Token Expiration**: Controle rigoroso de expira√ß√£o
- **Algorithm Binding**: Vincula√ß√£o a algoritmos espec√≠ficos
- **Audit Logging**: Logs de seguran√ßa para auditoria

## üéØ Casos de Uso por Cen√°rio

### Authentication Flow
```csharp
// 1. Login - Gera√ß√£o de token
var tokenResult = await tokenService.GenerateJwtTokenAsync(user, cancellationToken);

// 2. Request Authorization - Valida√ß√£o
var principalResult = await tokenService.ValidateTokenAsync(token, cancellationToken);

// 3. Token Refresh - Uso de token expirado
var expiredPrincipalResult = await tokenService.GetPrincipalFromExpiredTokenAsync(expiredToken, cancellationToken);
```

### Multi-Tenant Operations
```csharp
// Extra√ß√£o de contexto tenant
var tenantResult = await tokenService.GetTenantIdFromTokenAsync(token, cancellationToken);

// Identifica√ß√£o de usu√°rio
var userResult = await tokenService.GetUserIdFromTokenAsync(token, cancellationToken);
```

### Token Management
```csharp
// Verifica√ß√£o de expira√ß√£o
var expiredResult = await tokenService.IsTokenExpiredAsync(token, cancellationToken);

// Gera√ß√£o de refresh token
var refreshResult = await tokenService.GenerateRefreshTokenAsync(cancellationToken);
```

## üìä Result Pattern Implementation

### Estrutura de Retorno
```csharp
public sealed class Result<T>
{
    public bool IsSuccess { get; }
    public T? Data { get; }
    public string? Error { get; }
    public List<string> Errors { get; }
}
```

### Tratamento de Erros
```csharp
var result = await tokenService.GenerateJwtTokenAsync(user);

if (result.IsSuccess)
{
    var token = result.Data; // Token gerado com sucesso
}
else
{
    var error = result.Error; // Mensagem de erro espec√≠fica
    // Log do erro e tratamento apropriado
}
```

## üß™ Estrat√©gias de Teste

### Unit Tests Essenciais
```csharp
[Test]
public async Task GenerateJwtTokenAsync_ValidUser_ReturnsSuccessResult()
{
    // Arrange: User v√°lido
    // Act: Gerar token
    // Assert: Result.IsSuccess = true
}

[Test]
public async Task ValidateTokenAsync_ExpiredToken_ReturnsFailureResult()
{
    // Arrange: Token expirado
    // Act: Validar token
    // Assert: Result.IsSuccess = false, Error = "Token has expired"
}
```

### Integration Tests
```csharp
[Test]
public async Task TokenLifecycle_GenerateValidateRefresh_WorksCorrectly()
{
    // Teste completo do ciclo de vida do token
}
```

### Mock Implementation
```csharp
public class MockTokenService : ITokenService
{
    // Implementa√ß√£o mock para testes
    // Retorna resultados predefinidos para cen√°rios espec√≠ficos
}
```

## üìà Performance Considerations

### Async Operations
- **Non-blocking**: Todas as opera√ß√µes s√£o ass√≠ncronas
- **Cancellation Support**: Suporte completo a CancellationToken
- **Resource Efficiency**: Opera√ß√µes n√£o bloqueiam threads

### Caching Strategy
- **Configuration Cache**: Cache das configura√ß√µes JWT
- **Token Validation Cache**: Cache de valida√ß√µes recentes (implementa√ß√£o espec√≠fica)
- **Claims Cache**: Cache de claims extra√≠dos (opcional)

## üîÑ Migration Path

### De M√©todos Legacy para Modernos
```csharp
// Antes (Legacy)
try 
{
    var token = tokenService.GenerateJwtToken(user);
    // Usar token
}
catch (Exception ex)
{
    // Tratamento de exce√ß√£o
}

// Depois (Moderno)
var result = await tokenService.GenerateJwtTokenAsync(user, cancellationToken);
if (result.IsSuccess)
{
    var token = result.Data;
    // Usar token
}
else
{
    // Tratamento de erro espec√≠fico: result.Error
}
```

### Benef√≠cios da Migra√ß√£o
- ‚úÖ **Controle de Erro**: Result pattern ao inv√©s de exce√ß√µes
- ‚úÖ **Opera√ß√µes Ass√≠ncronas**: Melhor performance e escalabilidade
- ‚úÖ **Cancellation Support**: Possibilidade de cancelar opera√ß√µes
- ‚úÖ **Type Safety**: Retornos tipados e seguros
- ‚úÖ **Testabilidade**: Mais f√°cil de testar e mockar

## üìö Melhorias Implementadas

### Antes da Refatora√ß√£o
- Interface simples com 2 m√©todos
- Sem controle de erro estruturado
- Opera√ß√µes s√≠ncronas apenas
- Sem suporte a multi-tenancy avan√ßado
- Sem m√©todos de utilidade

### Ap√≥s a Refatora√ß√£o
- ‚úÖ Interface enterprise completa com 8 m√©todos
- ‚úÖ Result pattern para controle consistente de erro
- ‚úÖ Opera√ß√µes ass√≠ncronas com CancellationToken
- ‚úÖ Suporte completo a multi-tenancy
- ‚úÖ M√©todos de utilidade para extra√ß√£o de claims
- ‚úÖ Compatibilidade retroativa com m√©todos legacy
- ‚úÖ Documenta√ß√£o XML completa
- ‚úÖ Marca√ß√£o de obsolesc√™ncia para migra√ß√£o gradual
- ‚úÖ Suporte a refresh tokens
- ‚úÖ Valida√ß√£o avan√ßada de tokens

Esta interface representa um contrato enterprise robusto para opera√ß√µes de token JWT, seguindo as melhores pr√°ticas de seguran√ßa, performance e manutenibilidade.
