# MappingProfile.cs - Profile de Mapeamento AutoMapper

## üìã Vis√£o Geral
Este arquivo cont√©m o profile de configura√ß√£o do AutoMapper, respons√°vel por definir mapeamentos entre entidades de dom√≠nio e DTOs. Implementa padr√µes seguros e eficientes para transforma√ß√£o de dados.

## üèóÔ∏è Arquitetura e Estrutura

### Heran√ßa e Configura√ß√£o Base
```csharp
public class MappingProfile : Profile
```
- **Profile**: Classe base do AutoMapper para configura√ß√£o de mapeamentos
- **Centraliza√ß√£o**: Um √∫nico local para todas as configura√ß√µes de mapeamento
- **Modulariza√ß√£o**: M√©todos separados para diferentes grupos de entidades

### M√©todos de Configura√ß√£o
1. **Constructor**: Chama todos os m√©todos de configura√ß√£o espec√≠ficos
2. **ConfigureUserMappings()**: Mapeamentos relacionados a usu√°rios
3. **ConfigureProductMappings()**: Mapeamentos relacionados a produtos
4. **ConfigureProductRelatedMappings()**: Mapeamentos adicionais de produtos
5. **ConfigureAdditionalMappings()**: Placeholder para futuras entidades

## üîÑ Mapeamentos Implementados

### User ‚Üî UserDto
```csharp
// ApplicationUser para UserDto
CreateMap<ApplicationUser, UserDto>()
    .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => 
        CreateFullName(src.FirstName, src.LastName)))
    .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
    .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => src.FirstName))
    .ForMember(dest => dest.LastName, opt => opt.MapFrom(src => src.LastName))
    .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
    .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt))
    .ValidateMemberList(MemberList.Destination);

// UserDto para ApplicationUser (para atualiza√ß√µes)
CreateMap<UserDto, ApplicationUser>()
    .ForMember(dest => dest.FirstName, opt => opt.MapFrom(src => 
        string.IsNullOrWhiteSpace(src.FirstName) ? null : src.FirstName.Trim()))
    .ForMember(dest => dest.LastName, opt => opt.MapFrom(src => 
        string.IsNullOrWhiteSpace(src.LastName) ? null : src.LastName.Trim()))
    // Campos de sistema ignorados (gerenciados pela aplica√ß√£o)
    .ForMember(dest => dest.Id, opt => opt.Ignore())
    .ForMember(dest => dest.Email, opt => opt.Ignore())
    .ForMember(dest => dest.PasswordHash, opt => opt.Ignore())
    .ForMember(dest => dest.SecurityStamp, opt => opt.Ignore())
    .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
    .ValidateMemberList(MemberList.Source);
```

### Product ‚Üî ProductDto
```csharp
// Product para ProductDto
CreateMap<Product, ProductDto>()
    .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
    .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
    .ForMember(dest => dest.Description, opt => opt.MapFrom(src => src.Description))
    .ForMember(dest => dest.Price, opt => opt.MapFrom(src => src.Price))
    .ForMember(dest => dest.SKU, opt => opt.MapFrom(src => src.SKU))
    .ForMember(dest => dest.StockQuantity, opt => opt.MapFrom(src => src.StockQuantity))
    .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.IsActive))
    .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt))
    .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => src.UpdatedAt))
    .ForMember(dest => dest.TenantId, opt => opt.MapFrom(src => src.TenantId))
    // Mapeamentos condicionais baseados em regras de neg√≥cio
    .ForMember(dest => dest.Description, opt => opt.Condition(src => !string.IsNullOrWhiteSpace(src.Description)))
    .ForMember(dest => dest.SKU, opt => opt.Condition(src => !string.IsNullOrWhiteSpace(src.SKU)))
    .ValidateMemberList(MemberList.Destination);

// ProductDto para Product (para atualiza√ß√µes e cria√ß√£o)
CreateMap<ProductDto, Product>()
    .ForMember(dest => dest.Name, opt => opt.MapFrom(src => NormalizeName(src.Name)))
    .ForMember(dest => dest.Description, opt => opt.MapFrom(src => 
        string.IsNullOrWhiteSpace(src.Description) ? null : src.Description.Trim()))
    .ForMember(dest => dest.Price, opt => opt.MapFrom(src => src.Price))
    .ForMember(dest => dest.SKU, opt => opt.MapFrom(src => 
        string.IsNullOrWhiteSpace(src.SKU) ? null : src.SKU.Trim().ToUpperInvariant()))
    .ForMember(dest => dest.StockQuantity, opt => opt.MapFrom(src => Math.Max(0, src.StockQuantity)))
    .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.IsActive))
    // Campos gerenciados pelo sistema ignorados
    .ForMember(dest => dest.Id, opt => opt.Ignore())
    .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
    .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
    .ForMember(dest => dest.TenantId, opt => opt.Ignore())
    .ValidateMemberList(MemberList.Source);
```

## üõ†Ô∏è M√©todos Auxiliares

### CreateFullName
```csharp
private static string CreateFullName(string? firstName, string? lastName)
```
- **Prop√≥sito**: Cria nome completo concatenando primeiro e √∫ltimo nome
- **Tratamento de Nulos**: Lida graciosamente com valores nulos/vazios
- **Fallback**: Retorna "Unknown User" quando ambos os nomes s√£o vazios
- **Normaliza√ß√£o**: Remove espa√ßos em branco desnecess√°rios

### NormalizeName
```csharp
private static string NormalizeName(string? name)
```
- **Prop√≥sito**: Normaliza nomes de produtos para consist√™ncia
- **Valida√ß√£o**: Lan√ßa exce√ß√£o para nomes nulos/vazios
- **Limpeza**: Remove espa√ßos em branco iniciais e finais
- **Seguran√ßa**: Garante que dados cr√≠ticos n√£o sejam vazios

## üîí Aspectos de Seguran√ßa

### Valida√ß√£o de Mapeamentos
- **ValidateMemberList**: Garante que todos os membros sejam mapeados explicitamente
- **MemberList.Destination**: Valida mapeamentos para DTOs (sa√≠da)
- **MemberList.Source**: Valida mapeamentos de DTOs (entrada)

### Prote√ß√£o de Campos Sens√≠veis
```csharp
// Campos protegidos ignorados no mapeamento
.ForMember(dest => dest.PasswordHash, opt => opt.Ignore())
.ForMember(dest => dest.SecurityStamp, opt => opt.Ignore())
.ForMember(dest => dest.Id, opt => opt.Ignore())
```

### Sanitiza√ß√£o de Dados
- **Trim()**: Remove espa√ßos desnecess√°rios
- **ToUpperInvariant()**: Normaliza SKUs para mai√∫sculas
- **Math.Max(0, value)**: Garante quantidades n√£o negativas

## üìä Transforma√ß√µes de Dados

### Mapeamentos Condicionais
```csharp
.ForMember(dest => dest.Description, opt => opt.Condition(src => !string.IsNullOrWhiteSpace(src.Description)))
```
- **Condicional**: S√≥ mapeia se o valor de origem atender crit√©rios
- **Performance**: Evita mapeamentos desnecess√°rios
- **Qualidade**: Garante que apenas dados v√°lidos sejam transferidos

### Transforma√ß√µes Personalizadas
- **Nome Completo**: Concatena√ß√£o inteligente de primeiro e √∫ltimo nome
- **Normaliza√ß√£o de SKU**: Convers√£o para mai√∫sculas
- **Valida√ß√£o de Estoque**: Garantia de valores n√£o negativos

## üîÑ Fluxo de Dados

### Entrada (DTOs ‚Üí Entidades)
1. **Valida√ß√£o**: Verifica se dados de entrada s√£o v√°lidos
2. **Normaliza√ß√£o**: Aplica regras de formata√ß√£o
3. **Sanitiza√ß√£o**: Remove/corrige dados problem√°ticos
4. **Prote√ß√£o**: Ignora campos gerenciados pelo sistema

### Sa√≠da (Entidades ‚Üí DTOs)
1. **Mapeamento Direto**: Transfere dados b√°sicos
2. **Transforma√ß√£o**: Aplica formata√ß√µes para apresenta√ß√£o
3. **Enriquecimento**: Adiciona campos calculados (como FullName)
4. **Filtragem**: Exclui informa√ß√µes sens√≠veis

## üß™ Testabilidade

### M√©todos Est√°ticos
- **Test√°veis**: Todos os m√©todos auxiliares s√£o est√°ticos e puros
- **Determin√≠sticos**: Sempre retornam o mesmo resultado para a mesma entrada
- **Isolados**: N√£o dependem de estado externo

### Valida√ß√£o Autom√°tica
- **MemberList Validation**: Detecta automaticamente mapeamentos incompletos
- **Compilation Time**: Erros s√£o detectados em tempo de compila√ß√£o
- **Explicit Mapping**: For√ßa mapeamento expl√≠cito de todos os campos

## üìà Performance

### Otimiza√ß√µes
- **Lazy Evaluation**: Mapeamentos condicionais s√≥ executam quando necess√°rio
- **Static Methods**: M√©todos auxiliares est√°ticos para melhor performance
- **Single Responsibility**: Cada m√©todo faz apenas uma coisa

### Configura√ß√£o Eficiente
- **Profile Singleton**: AutoMapper reutiliza configura√ß√µes
- **Compilation**: Mapeamentos s√£o compilados uma vez e reutilizados
- **Memory Efficient**: N√£o mant√©m estado desnecess√°rio

## üîÆ Extensibilidade

### Estrutura Modular
```csharp
private void ConfigureAdditionalMappings()
{
    // Placeholder para futuras entidades:
    // ConfigureOrderMappings();
    // ConfigureCategoryMappings();
    // ConfigureTenantMappings();
}
```

### Padr√µes de Extens√£o
1. **Novos M√©todos**: Adicionar m√©todos de configura√ß√£o espec√≠ficos
2. **Heran√ßa**: Usar IncludeBase para reutilizar mapeamentos
3. **Conditional Mapping**: Expandir l√≥gica condicional conforme necess√°rio

## üéØ Boas Pr√°ticas Implementadas

### Clean Code
- **Nomes Descritivos**: M√©todos e vari√°veis com nomes claros
- **Single Responsibility**: Cada m√©todo tem uma responsabilidade espec√≠fica
- **DRY Principle**: Evita duplica√ß√£o de l√≥gica

### SOLID Principles
- **Open/Closed**: Aberto para extens√£o atrav√©s de novos m√©todos
- **Single Responsibility**: Cada m√©todo configura um tipo espec√≠fico
- **Dependency Inversion**: Depende de abstra√ß√µes (Profile)

### Domain-Driven Design
- **Separa√ß√£o de Responsabilidades**: Mapeamento isolado da l√≥gica de neg√≥cio
- **Linguagem Ub√≠qua**: Nomes que refletem o dom√≠nio
- **Agregados**: Respeita limites de agregados nos mapeamentos

## üöÄ Benef√≠cios

### Desenvolvimento
- **Produtividade**: Reduz c√≥digo boilerplate
- **Consist√™ncia**: Padroniza transforma√ß√µes de dados
- **Manutenibilidade**: Centraliza l√≥gica de mapeamento

### Qualidade
- **Type Safety**: Verifica√ß√£o de tipos em tempo de compila√ß√£o
- **Error Prevention**: Valida√ß√£o autom√°tica de mapeamentos
- **Data Integrity**: Garante integridade na transforma√ß√£o

### Performance
- **Optimized Mappings**: Mapeamentos otimizados pelo AutoMapper
- **Reduced Allocations**: Minimiza aloca√ß√µes desnecess√°rias
- **Cached Configurations**: Configura√ß√µes s√£o cacheadas

---

## üìù Notas de Implementa√ß√£o

- ‚úÖ Todos os mapeamentos s√£o expl√≠citos e validados
- ‚úÖ Campos sens√≠veis s√£o protegidos adequadamente  
- ‚úÖ Transforma√ß√µes seguem regras de neg√≥cio
- ‚úÖ Estrutura preparada para futuras extens√µes
- ‚úÖ Performance otimizada com m√©todos est√°ticos
- ‚úÖ Testabilidade garantida atrav√©s de design
