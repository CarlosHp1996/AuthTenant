# CreateProductDto.cs - Documenta√ß√£o T√©cnica

## üìã Vis√£o Geral
O `CreateProductDto` √© um Data Transfer Object especializado para cria√ß√£o de produtos, implementando valida√ß√£o robusta, sanitiza√ß√£o de dados e regras de neg√≥cio espec√≠ficas para um ambiente multi-tenant. Garante integridade e consist√™ncia desde o momento da cria√ß√£o.

## üèóÔ∏è Arquitetura e Design

### Padr√µes Implementados
- **Data Transfer Object (DTO)**: Transfer√™ncia segura para opera√ß√µes de cria√ß√£o
- **Command Pattern**: Representa comando de cria√ß√£o de produto
- **Validation Pattern**: Valida√ß√£o multicamada e business rules
- **Builder Pattern**: Factory methods para testing e setup
- **Value Object**: Propriedades computadas para valida√ß√£o

### Princ√≠pios SOLID
- **SRP**: Focado exclusivamente em cria√ß√£o de produtos
- **OCP**: Extens√≠vel via metadata sem modificar c√≥digo core
- **LSP**: Compat√≠vel com interface de cria√ß√£o
- **ISP**: Interface espec√≠fica para cria√ß√£o
- **DIP**: Independente de persistence layer

## üîß Principais Funcionalidades

### Propriedades Obrigat√≥rias
```csharp
[Required]
public string Name { get; set; }                // Nome do produto (2-200 chars)

[Required]
[Range(0.01, decimal.MaxValue)]
public decimal Price { get; set; }              // Pre√ßo inicial (> 0)
```

### Propriedades Opcionais
```csharp
public string? Description { get; set; }        // Descri√ß√£o (max 2000 chars)
public string? SKU { get; set; }                // C√≥digo SKU √∫nico
public int StockQuantity { get; set; } = 0      // Estoque inicial
public bool IsActive { get; set; } = true       // Status inicial ativo
```

### Propriedades Avan√ßadas
```csharp
public IList<string> Categories { get; set; }   // Categorias (max 10)
public IList<string> Tags { get; set; }         // Tags de busca (max 20)
public int MinimumStockLevel { get; set; } = 5  // N√≠vel m√≠nimo de estoque
public double? Weight { get; set; }             // Peso em gramas
public ProductDimensions? Dimensions { get; set; } // Dimens√µes f√≠sicas
public IDictionary<string, string>? Metadata    // Metadados personalizados
```

### Propriedades Computadas
```csharp
public string NormalizedName                    // Nome normalizado para busca
public string? NormalizedSKU                    // SKU normalizado
public bool HasSufficientInfo                   // Valida√ß√£o de informa√ß√£o suficiente
```

## ‚úÖ Valida√ß√£o Avan√ßada

### Valida√ß√£o de Nome
```csharp
private static bool IsValidName(string name)
{
    if (string.IsNullOrWhiteSpace(name))
        return false;

    // Verifica conte√∫do significativo (n√£o apenas espa√ßos/caracteres especiais)
    var cleanName = Regex.Replace(name.Trim(), @"[^\w\s]", "");
    return cleanName.Length >= 2;
}
```

### Valida√ß√£o de SKU
```csharp
[RegularExpression(@"^[A-Za-z0-9\-_]+$")]
private static bool IsValidSKU(string? sku)
{
    if (string.IsNullOrWhiteSpace(sku))
        return true; // SKU √© opcional

    return Regex.IsMatch(sku, @"^[A-Za-z0-9\-_]+$") && sku.Length <= 50;
}
```

### Valida√ß√£o de Cole√ß√µes
```csharp
// Categorias: m√°ximo 10, cada uma at√© 100 caracteres
private static bool IsValidCategories(IList<string> categories)
{
    if (categories == null || !categories.Any())
        return true;

    return categories.All(c => !string.IsNullOrWhiteSpace(c) && c.Length <= 100) &&
           categories.Count <= 10;
}

// Tags: m√°ximo 20, cada uma at√© 50 caracteres
private static bool IsValidTags(IList<string> tags)
{
    if (tags == null || !tags.Any())
        return true;

    return tags.All(t => !string.IsNullOrWhiteSpace(t) && t.Length <= 50) &&
           tags.Count <= 20;
}
```

## üîí Sanitiza√ß√£o e Seguran√ßa

### Limpeza Autom√°tica de Dados
```csharp
public void Sanitize()
{
    Name = Name?.Trim() ?? string.Empty;
    Description = string.IsNullOrWhiteSpace(Description) ? null : Description.Trim();
    SKU = string.IsNullOrWhiteSpace(SKU) ? null : SKU.Trim().ToUpperInvariant();
    
    // Limpa e normaliza categorias
    Categories = Categories?.Where(c => !string.IsNullOrWhiteSpace(c))
                          .Select(c => c.Trim())
                          .Distinct()
                          .ToList() ?? new List<string>();
    
    // Limpa e normaliza tags (lowercase para consist√™ncia)
    Tags = Tags?.Where(t => !string.IsNullOrWhiteSpace(t))
               .Select(t => t.Trim().ToLowerInvariant())
               .Distinct()
               .ToList() ?? new List<string>();

    // Garante que MinimumStockLevel n√£o √© maior que StockQuantity
    if (MinimumStockLevel > StockQuantity)
        MinimumStockLevel = Math.Max(0, StockQuantity - 1);
}
```

### Normaliza√ß√£o para Busca
```csharp
private static string NormalizeName(string name)
{
    if (string.IsNullOrWhiteSpace(name))
        return string.Empty;

    return Regex.Replace(name.Trim(), @"\s+", " ").ToLowerInvariant();
}
```

## üìè Suporte a Dimens√µes F√≠sicas

### Classe ProductDimensions
```csharp
public sealed class ProductDimensions
{
    [Range(0, double.MaxValue)]
    public double Length { get; set; }           // Comprimento em cm
    
    [Range(0, double.MaxValue)]
    public double Width { get; set; }            // Largura em cm
    
    [Range(0, double.MaxValue)]
    public double Height { get; set; }           // Altura em cm
    
    public double Volume => Length * Width * Height; // Volume calculado
    
    public bool IsValid() => Length >= 0 && Width >= 0 && Height >= 0;
}
```

## üîç Valida√ß√£o de Regras de Neg√≥cio

### M√©todo Principal de Valida√ß√£o
```csharp
public bool IsValid()
{
    return !string.IsNullOrWhiteSpace(Name) &&
           Name.Length >= 2 &&
           Name.Length <= 200 &&
           Price > 0 &&
           StockQuantity >= 0 &&
           MinimumStockLevel >= 0 &&
           (Description?.Length ?? 0) <= 2000 &&
           (SKU?.Length ?? 0) <= 50 &&
           (Weight ?? 0) >= 0 &&
           IsValidName(Name) &&
           IsValidSKU(SKU) &&
           IsValidCategories(Categories) &&
           IsValidTags(Tags);
}
```

### Coleta de Erros de Valida√ß√£o
```csharp
public IList<string> GetValidationErrors()
{
    var errors = new List<string>();

    if (string.IsNullOrWhiteSpace(Name))
        errors.Add("Product name is required");
    else if (Name.Length < 2)
        errors.Add("Product name must be at least 2 characters long");
    else if (Name.Length > 200)
        errors.Add("Product name cannot exceed 200 characters");

    if (Price <= 0)
        errors.Add("Price must be greater than 0");

    if (StockQuantity < 0)
        errors.Add("Stock quantity cannot be negative");

    // ... mais valida√ß√µes espec√≠ficas

    return errors;
}
```

## üß™ Testabilidade e Factory Methods

### Factory para Testes
```csharp
public static CreateProductDto CreateForTesting(string name, decimal price)
{
    return new CreateProductDto
    {
        Name = name,
        Price = price,
        StockQuantity = 100,
        IsActive = true
    };
}
```

### Exemplo de Uso em Testes
```csharp
[Test]
public void Should_Create_Valid_Product_Dto()
{
    // Arrange
    var dto = CreateProductDto.CreateForTesting("Test Product", 99.99m);
    
    // Act
    dto.Sanitize();
    var isValid = dto.IsValid();
    
    // Assert
    Assert.That(isValid, Is.True);
    Assert.That(dto.HasSufficientInfo, Is.True);
}
```

## üìä Serializa√ß√£o JSON

### Exemplo de Payload
```json
{
  "name": "Premium Wireless Headphones",
  "description": "High-quality wireless headphones with active noise cancellation",
  "price": 299.99,
  "sku": "WH-PRE-001",
  "stockQuantity": 100,
  "isActive": true,
  "categories": ["Electronics", "Audio", "Headphones"],
  "tags": ["wireless", "premium", "noise-cancelling"],
  "minimumStockLevel": 10,
  "weight": 250.5,
  "dimensions": {
    "length": 20.5,
    "width": 18.0,
    "height": 8.5,
    "volume": 3135.75
  },
  "metadata": {
    "brand": "TechCorp",
    "warranty": "2-years",
    "color": "black"
  }
}
```

## üîÑ Integra√ß√£o com Command Handlers

### Uso em Create Command
```csharp
public class CreateProductCommand : IRequest<Result<Guid>>
{
    public CreateProductDto ProductData { get; set; }
}

public class CreateProductHandler : IRequestHandler<CreateProductCommand, Result<Guid>>
{
    public async Task<Result<Guid>> Handle(CreateProductCommand request, CancellationToken cancellationToken)
    {
        // Sanitiza os dados
        request.ProductData.Sanitize();
        
        // Valida o DTO
        if (!request.ProductData.IsValid())
        {
            var errors = request.ProductData.GetValidationErrors();
            return Result<Guid>.Failure(string.Join(", ", errors));
        }
        
        // Mapeia para entidade e persiste
        var product = _mapper.Map<Product>(request.ProductData);
        await _productRepository.AddAsync(product);
        
        return Result<Guid>.Success(product.Id);
    }
}
```

## üìà Melhorias Implementadas

### Antes da Refatora√ß√£o
- Valida√ß√£o b√°sica via Data Annotations
- Apenas propriedades essenciais
- Sem sanitiza√ß√£o autom√°tica
- Sem suporte a categorias/tags
- Sem valida√ß√£o de regras de neg√≥cio
- Sem suporte a dimens√µes f√≠sicas

### Ap√≥s a Refatora√ß√£o
- ‚úÖ Valida√ß√£o robusta multicamada
- ‚úÖ Sanitiza√ß√£o autom√°tica de dados
- ‚úÖ Suporte a categorias e tags
- ‚úÖ Propriedades computadas para valida√ß√£o
- ‚úÖ Suporte a dimens√µes f√≠sicas
- ‚úÖ Metadados extens√≠veis
- ‚úÖ Normaliza√ß√£o para busca
- ‚úÖ Factory methods para testing
- ‚úÖ Coleta estruturada de erros
- ‚úÖ Documenta√ß√£o XML completa
- ‚úÖ Regras de neg√≥cio integradas

## üõ†Ô∏è Manuten√ß√£o e Evolu√ß√£o

### Extensibilidade
- Metadados personalizados para necessidades espec√≠ficas
- Valida√ß√£o extens√≠vel via m√©todos virtuais
- Suporte a novos campos via propriedades opcionais

### Performance
- Propriedades computadas lazy
- Valida√ß√£o eficiente com short-circuit
- Normaliza√ß√£o otimizada

### Seguran√ßa
- Sanitiza√ß√£o autom√°tica previne XSS
- Valida√ß√£o robusta previne injection
- Normaliza√ß√£o consistente

## üìö Casos de Uso

### Principais Cen√°rios
1. **Cria√ß√£o via API**: Endpoint REST para criar produtos
2. **Import em Lote**: Valida√ß√£o de produtos importados
3. **Interface de Administra√ß√£o**: Formul√°rios de cria√ß√£o
4. **Integra√ß√£o**: Recebimento de dados de sistemas externos
5. **Testes**: Cria√ß√£o de dados para testing

### Benef√≠cios Alcan√ßados
- **Integridade**: Dados sempre v√°lidos e consistentes
- **Seguran√ßa**: Sanitiza√ß√£o e valida√ß√£o robusta
- **Manutenibilidade**: C√≥digo limpo e test√°vel
- **Flexibilidade**: Extens√≠vel via metadados
- **Performance**: Valida√ß√£o eficiente
- **Usabilidade**: Mensagens de erro claras

Esta implementa√ß√£o garante que todos os produtos sejam criados com dados v√°lidos, consistentes e seguros desde o primeiro momento.
