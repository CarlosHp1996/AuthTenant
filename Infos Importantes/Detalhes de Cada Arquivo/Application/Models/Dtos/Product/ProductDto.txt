# ProductDto.cs - Documenta√ß√£o T√©cnica

## üìã Vis√£o Geral
O `ProductDto` √© um Data Transfer Object robusto e feature-rich para representa√ß√£o de produtos em opera√ß√µes de leitura. Implementa valida√ß√£o avan√ßada, propriedades computadas inteligentes, auditoria completa e suporte a metadados extens√≠veis para um sistema multi-tenant.

## üèóÔ∏è Arquitetura e Design

### Padr√µes Implementados
- **Data Transfer Object (DTO)**: Transfer√™ncia segura de dados entre camadas
- **Value Object**: Propriedades computadas imut√°veis
- **Decorator Pattern**: Formata√ß√£o inteligente de dados
- **Builder Pattern**: M√©todos factory para testing
- **Validation Pattern**: Valida√ß√£o multicamada

### Princ√≠pios SOLID
- **SRP**: Classe focada apenas em representa√ß√£o de produto
- **OCP**: Extens√≠vel via metadata sem modificar c√≥digo base
- **LSP**: Substitu√≠vel por outros DTOs de produto
- **ISP**: Interface espec√≠fica para produto com propriedades relevantes
- **DIP**: Independente de implementa√ß√µes espec√≠ficas

## üîß Principais Funcionalidades

### Propriedades Base
```csharp
public Guid Id { get; set; }                    // Identificador √∫nico
public string Name { get; set; }                // Nome do produto
public string? Description { get; set; }        // Descri√ß√£o detalhada
public decimal Price { get; set; }              // Pre√ßo atual
public string? SKU { get; set; }                // C√≥digo SKU
public int StockQuantity { get; set; }          // Quantidade em estoque
public bool IsActive { get; set; }              // Status ativo/inativo
```

### Propriedades Computadas Inteligentes
```csharp
public string FormattedPrice                    // Pre√ßo formatado com moeda
public bool InStock                             // Indica se h√° estoque
public string StockStatus                       // Status descritivo do estoque
public bool IsNew                               // Produto criado recentemente
public bool RecentlyUpdated                     // Produto atualizado recentemente
public string DisplayName                       // Nome para exibi√ß√£o
```

### Auditoria e Rastreamento
```csharp
public DateTime CreatedAt { get; set; }         // Data de cria√ß√£o
public DateTime? UpdatedAt { get; set; }        // Data de √∫ltima atualiza√ß√£o
public string? CreatedBy { get; set; }          // Usu√°rio criador
public string? UpdatedBy { get; set; }          // √öltimo usu√°rio que atualizou
```

### Organiza√ß√£o e Metadados
```csharp
public IList<string> Categories { get; set; }   // Categorias do produto
public IList<string> Tags { get; set; }         // Tags para busca
public IDictionary<string, string>? Metadata    // Metadados extens√≠veis
```

## ‚úÖ Valida√ß√£o e Regras de Neg√≥cio

### Valida√ß√£o de Entrada
- **Nome**: Obrigat√≥rio, 2-200 caracteres, conte√∫do significativo
- **Pre√ßo**: Obrigat√≥rio, maior que 0
- **Descri√ß√£o**: Opcional, m√°ximo 2000 caracteres
- **SKU**: Opcional, formato alfanum√©rico, m√°ximo 50 caracteres
- **Estoque**: N√£o negativo
- **Categorias**: M√°ximo 10, cada uma com at√© 100 caracteres
- **Tags**: M√°ximo 20, cada uma com at√© 50 caracteres

### L√≥gica de Neg√≥cio
```csharp
// Verifica se produto √© novo (criado h√° menos de 7 dias)
IsNew = CreatedAt > DateTime.UtcNow.AddDays(-7)

// Verifica se foi atualizado recentemente (menos de 24h)
RecentlyUpdated = UpdatedAt.HasValue && UpdatedAt > DateTime.UtcNow.AddHours(-24)

// Status de estoque baseado em quantidade e n√≠vel m√≠nimo
StockStatus = StockQuantity > MinimumStockLevel ? "In Stock" : 
              StockQuantity > 0 ? "Low Stock" : "Out of Stock"
```

## üîí Seguran√ßa e Multi-Tenancy

### Isolamento de Dados
- Todos os produtos s√£o isolados por tenant automaticamente
- IDs √∫nicos previnem vazamento de dados entre tenants
- Valida√ß√£o de SKU por tenant

### Sanitiza√ß√£o
```csharp
public void Sanitize()
{
    Name = Name?.Trim() ?? string.Empty;
    Description = string.IsNullOrWhiteSpace(Description) ? null : Description.Trim();
    SKU = string.IsNullOrWhiteSpace(SKU) ? null : SKU.Trim().ToUpperInvariant();
    
    // Limpa e normaliza categorias/tags
    Categories = Categories?.Where(c => !string.IsNullOrWhiteSpace(c))
                          .Select(c => c.Trim())
                          .Distinct()
                          .ToList() ?? new List<string>();
}
```

## üìä Performance e Otimiza√ß√£o

### Propriedades Lazy
- Propriedades computadas s√£o calculadas sob demanda
- Formata√ß√£o de pre√ßo otimizada para cultura atual
- Normaliza√ß√£o inteligente de strings

### Serializa√ß√£o JSON
```json
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "name": "Premium Wireless Headphones",
  "formattedPrice": "$299.99",
  "inStock": true,
  "stockStatus": "In Stock",
  "isNew": true,
  "categories": ["Electronics", "Audio"],
  "tags": ["wireless", "premium", "noise-cancelling"]
}
```

## üß™ Testabilidade

### Factory Methods
```csharp
// Para testes unit√°rios
var productDto = ProductDto.CreateForTesting("Test Product", 99.99m);

// Para testes de integra√ß√£o
var productDto = ProductDto.CreateWithAudit("Test Product", 99.99m, "test-user");
```

### M√©todos de Valida√ß√£o
```csharp
bool isValid = productDto.IsValid();
var errors = productDto.GetValidationErrors();
bool hasMinimalInfo = productDto.HasMinimalRequiredInfo;
```

## üîÑ Integra√ß√£o com Sistema

### AutoMapper Profile
```csharp
CreateMap<Product, ProductDto>()
    .ForMember(dest => dest.FormattedPrice, opt => opt.Ignore())
    .ForMember(dest => dest.InStock, opt => opt.Ignore())
    .ForMember(dest => dest.StockStatus, opt => opt.Ignore());
```

### Uso em Controllers
```csharp
[HttpGet("{id}")]
public async Task<ActionResult<Result<ProductDto>>> GetProduct(Guid id)
{
    var result = await _mediator.Send(new GetProductQuery { Id = id });
    return Ok(result);
}
```

## üîç Padr√µes de Busca e Filtragem

### Propriedades Normalizadas
- `NormalizedName`: Para busca case-insensitive
- `NormalizedSKU`: Para compara√ß√£o de SKU
- `SearchableContent`: Combina nome, descri√ß√£o e tags

### Suporte a Filtros
- Por categoria, tags, faixa de pre√ßo
- Por status de estoque
- Por data de cria√ß√£o/atualiza√ß√£o
- Por status ativo/inativo

## üìà Melhorias Implementadas

### Antes da Refatora√ß√£o
- Classe simples com propriedades b√°sicas
- Valida√ß√£o limitada via Data Annotations
- Sem propriedades computadas
- Sem suporte a auditoria
- Sem organiza√ß√£o (categorias/tags)

### Ap√≥s a Refatora√ß√£o
- ‚úÖ Propriedades computadas inteligentes
- ‚úÖ Valida√ß√£o robusta multicamada
- ‚úÖ Auditoria completa
- ‚úÖ Suporte a metadados extens√≠veis
- ‚úÖ Organiza√ß√£o via categorias e tags
- ‚úÖ Formata√ß√£o autom√°tica
- ‚úÖ M√©todos de testing
- ‚úÖ Documenta√ß√£o XML completa
- ‚úÖ Sanitiza√ß√£o de dados
- ‚úÖ Performance otimizada

## üõ†Ô∏è Manuten√ß√£o e Evolu√ß√£o

### Extensibilidade
- Metadados personalizados via `Metadata` dictionary
- Propriedades computadas podem ser facilmente adicionadas
- Valida√ß√£o extens√≠vel via m√©todos virtuais

### Versionamento
- Compatibilidade com vers√µes anteriores via propriedades opcionais
- Suporte a migra√ß√£o de dados via factory methods
- Serializa√ß√£o controlada via JsonPropertyName

## üìö Casos de Uso

### Principais Cen√°rios
1. **Listagem de Produtos**: Exibi√ß√£o em cat√°logos e grids
2. **Detalhes de Produto**: P√°gina de produto individual
3. **APIs REST**: Resposta padronizada para clientes
4. **Cache**: Representa√ß√£o serializable para cache
5. **Relat√≥rios**: Dados formatados para exporta√ß√£o
6. **Integra√ß√£o**: Troca de dados com sistemas externos

### Benef√≠cios Alcan√ßados
- **Consist√™ncia**: Representa√ß√£o uniforme de produtos
- **Performance**: Propriedades computadas otimizadas
- **Manutenibilidade**: C√≥digo limpo e bem documentado
- **Testabilidade**: Factory methods e valida√ß√£o test√°vel
- **Seguran√ßa**: Valida√ß√£o e sanitiza√ß√£o robusta
- **Flexibilidade**: Extens√≠vel via metadados

Esta implementa√ß√£o representa um DTO moderno, robusto e enterprise-ready para gerenciamento de produtos em um sistema multi-tenant.
