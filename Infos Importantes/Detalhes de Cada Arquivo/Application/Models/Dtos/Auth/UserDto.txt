# UserDto.cs - DTO de Usu√°rio

## üìã Vis√£o Geral
DTO (Data Transfer Object) que representa informa√ß√µes de usu√°rio de forma segura para respostas de API. Exclui informa√ß√µes sens√≠veis como senhas e implementa suporte √† arquitetura multi-tenant com isolamento de dados.

## üèóÔ∏è Arquitetura e Estrutura

### Classe Selada
```csharp
public sealed class UserDto
```
- **Sealed**: Previne heran√ßa para manter controle total sobre a estrutura
- **Thread-Safe**: Design imut√°vel ap√≥s constru√ß√£o
- **Security-First**: Campos sens√≠veis s√£o exclu√≠dos por design

## üìã Propriedades Principais

### Identifica√ß√£o do Usu√°rio
```csharp
[Required]
[JsonPropertyName("id")]
public string Id { get; set; } = string.Empty;
```
- **Tipo**: GUID string representation
- **Requerido**: Campo obrigat√≥rio para identifica√ß√£o √∫nica
- **JSON**: Serializado como "id" em lowercase

### Informa√ß√µes de Contato
```csharp
[Required]
[EmailAddress]
[JsonPropertyName("email")]
public string Email { get; set; } = string.Empty;
```
- **Valida√ß√£o**: Email v√°lido obrigat√≥rio
- **√önico**: Deve ser √∫nico dentro do tenant
- **Autentica√ß√£o**: Usado como identificador principal

### Dados Pessoais
```csharp
[Required]
[StringLength(50, MinimumLength = 1)]
[JsonPropertyName("firstName")]
public string FirstName { get; set; } = string.Empty;

[Required]
[StringLength(50, MinimumLength = 1)]
[JsonPropertyName("lastName")]
public string LastName { get; set; } = string.Empty;
```
- **Limita√ß√µes**: 1-50 caracteres cada
- **Personaliza√ß√£o**: Usado para interface personalizada
- **Display**: Combinado para formar nome completo

### Multi-Tenancy
```csharp
[Required]
[JsonPropertyName("tenantId")]
public string TenantId { get; set; } = string.Empty;
```
- **Isolamento**: Garante isolamento de dados entre tenants
- **Seguran√ßa**: Cr√≠tico para controle de acesso
- **Valida√ß√£o**: Verificado em todas as opera√ß√µes

## üîí Propriedades de Seguran√ßa

### Status da Conta
```csharp
[JsonPropertyName("isActive")]
public bool IsActive { get; set; } = true;
```
- **Controle de Acesso**: Desativa conta sem deletar dados
- **Auditoria**: Rastreia status do usu√°rio
- **Default**: Usu√°rios s√£o ativos por padr√£o

### Verifica√ß√£o de Email
```csharp
[JsonPropertyName("emailVerified")]
public bool EmailVerified { get; set; } = false;
```
- **Seguran√ßa**: Confirma validade do email
- **Processo**: Verificado via token de confirma√ß√£o
- **Default**: N√£o verificado inicialmente

### Informa√ß√µes de Sess√£o
```csharp
[JsonPropertyName("lastLoginAt")]
public DateTime? LastLoginAt { get; set; }
```
- **Auditoria**: Rastreia atividade do usu√°rio
- **Nullable**: Null para usu√°rios que nunca logaram
- **UTC**: Sempre em formato UTC

## üéØ Propriedades Computadas

### Nome Completo
```csharp
[JsonPropertyName("fullName")]
public string FullName => CreateFullName(FirstName, LastName);
```
- **Read-Only**: Propriedade calculada dinamicamente
- **Smart Formatting**: Lida com nomes vazios graciosamente
- **Consistent**: Sempre formatado consistentemente

### Nome de Exibi√ß√£o Efetivo
```csharp
[JsonPropertyName("effectiveDisplayName")]
public string EffectiveDisplayName => !string.IsNullOrWhiteSpace(DisplayName) ? DisplayName : FullName;
```
- **Fallback**: DisplayName personalizado ou FullName
- **Flexibilidade**: Permite nomes profissionais/apelidos
- **UI**: Usado em interfaces de usu√°rio

### Indicadores de Status
```csharp
[JsonPropertyName("isNewUser")]
public bool IsNewUser => LastLoginAt == null;

[JsonPropertyName("daysSinceCreation")]
public int DaysSinceCreation => (DateTime.UtcNow - CreatedAt).Days;
```
- **Business Logic**: Indicadores √∫teis para UI/UX
- **Analytics**: Dados para an√°lise de comportamento
- **Lifecycle**: Gest√£o do ciclo de vida do usu√°rio

## üõ°Ô∏è Autoriza√ß√£o e Roles

### Sistema de Roles
```csharp
[JsonPropertyName("roles")]
public IReadOnlyList<string> Roles { get; set; } = new List<string>();
```
- **Read-Only Collection**: Previne modifica√ß√£o acidental
- **Tenant-Scoped**: Roles espec√≠ficas por tenant
- **Authorization**: Usado para controle de acesso

## üîß M√©todos Auxiliares

### Cria√ß√£o de Nome Completo
```csharp
private static string CreateFullName(string? firstName, string? lastName)
{
    return (first, last) switch
    {
        ("", "") => "Unknown User",
        (var f, "") => f,
        ("", var l) => l,
        (var f, var l) => $"{f} {l}"
    };
}
```
- **Pattern Matching**: Usa switch expressions modernas
- **Null Safe**: Lida com todos os cen√°rios de entrada
- **Fallback**: "Unknown User" para casos extremos

### Valida√ß√£o de Email
```csharp
private static bool IsValidEmail(string email)
{
    try
    {
        var addr = new System.Net.Mail.MailAddress(email);
        return addr.Address == email;
    }
    catch
    {
        return false;
    }
}
```
- **Framework Native**: Usa valida√ß√£o do .NET
- **Exception Safe**: N√£o lan√ßa exce√ß√µes
- **Strict**: Valida√ß√£o rigorosa de formato

## ‚úÖ M√©todos de Valida√ß√£o

### Valida√ß√£o Completa
```csharp
public bool IsValid()
{
    return !string.IsNullOrWhiteSpace(Id) &&
           !string.IsNullOrWhiteSpace(Email) &&
           !string.IsNullOrWhiteSpace(FirstName) &&
           !string.IsNullOrWhiteSpace(LastName) &&
           !string.IsNullOrWhiteSpace(TenantId) &&
           IsValidEmail(Email);
}
```
- **Comprehensive**: Verifica todos os campos obrigat√≥rios
- **Business Rules**: Aplica regras de neg√≥cio espec√≠ficas
- **Consistency**: Garante integridade dos dados

## üîÑ Serializa√ß√£o JSON

### Naming Strategy
```csharp
[JsonPropertyName("propertyName")]
```
- **camelCase**: Consist√™ncia com padr√µes web
- **Explicit**: Nomes expl√≠citos para controle total
- **API Friendly**: Formato esperado por frontends

### Propriedades Ignoradas
```csharp
[JsonIgnore]
public string InternalProperty { get; set; }
```
- **Internal Use**: Dados n√£o expostos via API
- **Security**: Previne vazamento de informa√ß√µes
- **Clean API**: Interface limpa para consumidores

## üéØ Padr√µes de Uso

### Resposta de Autentica√ß√£o
```csharp
var authResponse = new AuthResponseDto
{
    User = userDto,
    Token = "...",
    // ...
};
```

### Listagem de Usu√°rios
```csharp
var users = await userService.GetUsersAsync();
var userDtos = mapper.Map<List<UserDto>>(users);
```

### Profile do Usu√°rio
```csharp
var currentUser = userDto.EffectiveDisplayName;
var isNew = userDto.IsNewUser;
```

## üîí Considera√ß√µes de Seguran√ßa

### Dados Exclu√≠dos
- ‚ùå **PasswordHash**: Nunca expostos
- ‚ùå **SecurityStamp**: Informa√ß√µes de seguran√ßa internas
- ‚ùå **Salt**: Dados de criptografia
- ‚ùå **Tokens**: Tokens de acesso/refresh

### Dados Inclu√≠dos Seguros
- ‚úÖ **Email**: Identifica√ß√£o necess√°ria
- ‚úÖ **Roles**: Para autoriza√ß√£o frontend
- ‚úÖ **Status**: Para controle de UI
- ‚úÖ **Metadata**: Informa√ß√µes n√£o sens√≠veis

## üìä Performance

### Propriedades Calculadas
- **Lazy Evaluation**: Calculadas apenas quando acessadas
- **No Caching**: Sempre atualizadas
- **Lightweight**: Opera√ß√µes simples

### Serializa√ß√£o
- **Efficient**: Apenas dados necess√°rios
- **Compact**: JSON otimizado
- **Fast**: Serializa√ß√£o r√°pida

## üß™ Testabilidade

### Factory Methods
```csharp
public static UserDto CreateForTesting(string email, string tenantId)
{
    return new UserDto
    {
        Id = Guid.NewGuid().ToString(),
        Email = email,
        TenantId = tenantId,
        // ...
    };
}
```

### Validation Testing
```csharp
[Test]
public void UserDto_WithValidData_ShouldBeValid()
{
    var userDto = CreateValidUserDto();
    Assert.True(userDto.IsValid());
}
```

## üîÆ Extensibilidade

### Novos Campos
- **Backward Compatible**: Adicionar campos opcionais
- **Versioning**: Considerar versionamento de API
- **Migration**: Planos para migra√ß√£o de dados

### Custom Properties
- **DisplayName**: J√° preparado para personaliza√ß√£o
- **Metadata**: Campos adicionais conforme necess√°rio
- **Preferences**: Configura√ß√µes do usu√°rio

## üéØ Boas Pr√°ticas Implementadas

### Data Transfer Object Pattern
- **Separation of Concerns**: Separado de entidades de dom√≠nio
- **API Contract**: Define contrato claro da API
- **Validation**: Valida√ß√£o espec√≠fica para transfer√™ncia

### Security by Design
- **Least Privilege**: Apenas dados necess√°rios expostos
- **Input Validation**: Valida√ß√£o rigorosa de entrada
- **Output Sanitization**: Dados limpos na sa√≠da

### Multi-Tenant Architecture
- **Tenant Isolation**: TenantId sempre presente
- **Data Segregation**: Dados isolados por tenant
- **Security Context**: Contexto de seguran√ßa preservado

---

## üìù Notas de Implementa√ß√£o

- ‚úÖ Todas as propriedades s√£o validadas adequadamente
- ‚úÖ Serializa√ß√£o JSON otimizada para APIs web
- ‚úÖ M√©todos auxiliares s√£o test√°veis e seguros
- ‚úÖ Multi-tenancy suportado nativamente
- ‚úÖ Propriedades computadas para melhor UX
- ‚úÖ Valida√ß√£o de email robusta implementada
- ‚úÖ Seguran√ßa garantida atrav√©s de design
