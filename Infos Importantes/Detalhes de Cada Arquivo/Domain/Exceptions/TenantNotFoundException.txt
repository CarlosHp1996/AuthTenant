=========================================================
TENANTNOTFOUNDEXCEPTION.CS - DOCUMENTAÇÃO TÉCNICA
=========================================================

VISÃO GERAL:
-----------
Exceção especializada lançada quando um tenant solicitado não é encontrado no sistema.
Indica identificadores inválidos, tenants removidos ou problemas de acesso.
Fornece contexto rico para diferentes tipos de busca e diagnóstico avançado.

LOCALIZAÇÃO:
-----------
📁 AuthTenant.Domain/Exceptions/TenantNotFoundException.cs

DEPENDÊNCIAS:
------------
✅ DomainException - Herança de funcionalidades base
✅ System.ComponentModel.DataAnnotations - Validações de dados
✅ ExceptionSeverity - Enum de severidade
✅ ArgumentException - Validações de parâmetros

RESPONSABILIDADES:
-----------------
🔸 Representar falhas na localização de tenants
🔸 Diagnosticar diferentes cenários de falha
🔸 Fornecer contexto para debugging e auditoria
🔸 Sugerir possíveis causas e soluções
🔸 Categorizar tipos de busca realizados
🔸 Detectar tenants removidos vs inexistentes

PROPRIEDADES ESPECÍFICAS:
------------------------

1. IDENTIFICAÇÃO DO TENANT:
   ✅ RequestedTenantId (string) - ID que foi solicitado
   ✅ SearchType (string) - Tipo de busca realizada
   ✅ SearchValue (string?) - Valor usado na busca
   ✅ Rastreamento completo da tentativa

2. CONTEXTO DE BUSCA:
   ✅ MayBeDeleted (bool) - Indica possível remoção
   ✅ LastCheckedAt (DateTime?) - Última verificação
   ✅ Histórico de verificações
   ✅ Cache invalidation context

3. DIAGNÓSTICO AVANÇADO:
   ✅ PossibleCauses (List<string>) - Causas prováveis
   ✅ SearchContext - Contexto da operação
   ✅ Performance metrics
   ✅ Recovery suggestions

TIPOS DE BUSCA SUPORTADOS:
-------------------------

🔍 **ById** - Busca por identificador único
   • Mais comum e direto
   • Cache lookup otimizado
   • Validação de formato UUID

🔍 **ByName** - Busca por nome do tenant
   • Case-insensitive search
   • Fuzzy matching disponível
   • Histórico de renomeações

🔍 **ByDomain** - Busca por domínio customizado
   • DNS resolution validation
   • HTTPS certificate check
   • Subdomain wildcards

🔍 **BySubdomain** - Busca por subdomínio
   • URL pattern matching
   • Multi-region support
   • CDN integration

CONSTRUTORES DISPONÍVEIS:
------------------------

🔧 **Construtor por ID (Principal):**
   ```csharp
   TenantNotFoundException(string tenantId, string? userId, bool mayBeDeleted, Guid? correlationId)
   ```
   - Para buscas por ID (cenário mais comum)
   - Validação automática de tenantId
   - Context mínimo para performance

🔧 **Construtor Avançado:**
   ```csharp
   TenantNotFoundException(string searchValue, string searchType, string? tenantId, string? userId, bool mayBeDeleted, DateTime? lastCheckedAt, Guid? correlationId)
   ```
   - Para diferentes tipos de busca
   - Contexto rico com diagnóstico
   - Possíveis causas automáticas

FACTORY METHODS:
---------------

🏭 **ForId(tenantId, userId)**
   - Método estático para busca por ID
   - Sintaxe limpa e clara
   - Parâmetros nomeados explícitos

🏭 **ForName(tenantName, userId)**
   - Para buscas por nome
   - SearchType = "ByName" automático
   - Contexto apropriado

🏭 **ForDomain(domain, userId)**
   - Para buscas por domínio
   - Validações DNS específicas
   - Troubleshooting de configuração

🏭 **ForDeletedTenant(tenantId, userId, lastCheckedAt)**
   - Para tenants removidos
   - MayBeDeleted = true automático
   - Contexto de auditoria

DIAGNÓSTICO AUTOMÁTICO:
----------------------

🔍 **GetPossibleCauses(searchType, mayBeDeleted)**
   - Gera lista de causas prováveis baseada no contexto
   - Específico para cada tipo de busca
   - Inclui sugestões de resolução

📋 **Causas por Tipo de Busca:**

**ById:**
- ID do tenant inválido ou inexistente
- Erro de digitação no identificador
- Tenant removido ou desativado
- Permissões insuficientes
- Cache desatualizado

**ByName:**
- Nome do tenant incorreto
- Tenant renomeado recentemente
- Case sensitivity issues
- Caracteres especiais não tratados

**ByDomain:**
- Domínio customizado não configurado
- DNS não resolvido corretamente
- SSL certificate issues
- CDN configuration problems

**BySubdomain:**
- Subdomínio não configurado
- URL de acesso incorreta
- Multi-region routing issues
- Load balancer configuration

CONTEXTO ESTRUTURADO:
--------------------

🗂️ **Contexto Automático (WithContext):**
   ```json
   {
     "requestedTenantId": "tenant-123",
     "searchType": "ById",
     "searchValue": "tenant-123",
     "mayBeDeleted": false,
     "lastCheckedAt": "2024-01-15T10:30:00Z",
     "possibleCauses": [
       "ID do tenant inválido ou inexistente",
       "Erro de digitação no identificador",
       "Permissões insuficientes para acessar o tenant",
       "Cache desatualizado - tente novamente"
     ]
   }
   ```

FUNCIONALIDADES DE SEGURANÇA:
-----------------------------
🔒 **Auditoria de Acesso** - Log de tentativas de acesso
🔒 **Rate Limiting** - Prevenção de ataques de enumeração
🔒 **Masking de Dados** - Proteção de informações sensíveis
🔒 **Correlation Tracking** - Rastreamento de padrões suspeitos
🔒 **Tenant Isolation** - Prevenção de vazamento de dados

CONFIGURAÇÕES DE SEVERIDADE:
---------------------------
📊 **Medium (Padrão)** - Para a maioria dos casos
📊 **High** - Para tentativas suspeitas ou repeated failures
📊 **Low** - Para buscas opcionais ou exploratórias
📊 **Critical** - Para falhas em operações críticas

INTEGRAÇÃO COM SISTEMA:
----------------------
🔗 **Tenant Resolver** - Cache invalidation automático
🔗 **Audit Service** - Logging de tentativas de acesso
🔗 **Monitoring** - Alertas para padrões anômalos
🔗 **DNS Provider** - Validação de domínios
🔗 **CDN Service** - Verificação de configuração
🔗 **Security Service** - Detecção de ataques

CENÁRIOS DE USO COMUNS:
----------------------
✅ **Login com Tenant Incorreto** - Usuário digita ID errado
✅ **Migração de Tenant** - Tenant movido entre regiões
✅ **Expiração de Assinatura** - Tenant temporariamente inacessível
✅ **Configuração de DNS** - Domínio customizado mal configurado
✅ **Ambiente de Desenvolvimento** - Dados de teste inconsistentes
✅ **Restore de Backup** - Tenant temporariamente indisponível

EXEMPLO DE IMPLEMENTAÇÃO:
------------------------
```csharp
// Repositório com tratamento avançado
public async Task<Tenant> GetByIdAsync(string tenantId, string? userId = null)
{
    try
    {
        var tenant = await _context.Tenants
            .Where(t => t.Id == tenantId && !t.IsDeleted)
            .FirstOrDefaultAsync();
            
        if (tenant == null)
        {
            // Verifica se existe mas foi removido
            var deletedTenant = await _context.Tenants
                .IgnoreQueryFilters()
                .Where(t => t.Id == tenantId && t.IsDeleted)
                .FirstOrDefaultAsync();
                
            if (deletedTenant != null)
            {
                throw TenantNotFoundException.ForDeletedTenant(
                    tenantId, userId, deletedTenant.DeletedAt);
            }
            
            throw TenantNotFoundException.ForId(tenantId, userId);
        }
        
        return tenant;
    }
    catch (FormatException)
    {
        throw new TenantNotFoundException(
            tenantId, "ById", userId: userId)
            .WithContext(new { 
                Error = "Invalid GUID format",
                ProvidedValue = tenantId,
                ExpectedFormat = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            });
    }
}
```

EXEMPLO DE USO:
--------------
```csharp
// Uso básico
try
{
    var tenant = await tenantService.GetByIdAsync("invalid-id");
}
catch (TenantNotFoundException ex)
{
    // Log estruturado
    logger.LogWarning(ex.ToJson());
    
    // Resposta apropriada para o usuário
    return NotFound(new
    {
        Error = "Tenant não encontrado",
        Code = ex.ErrorCode,
        RequestedId = ex.RequestedTenantId,
        SearchType = ex.SearchType,
        Suggestions = GetUserFriendlySuggestions(ex)
    });
}

// Factory methods
throw TenantNotFoundException.ForName("empresa-xyz", userId);
throw TenantNotFoundException.ForDomain("empresa.com", userId);
throw TenantNotFoundException.ForDeletedTenant("tenant-123", userId);

// Com contexto rico
throw TenantNotFoundException.ForId("tenant-123", userId)
    .WithProperty("SearchMethod", "Cache")
    .WithProperty("CacheExpiry", cacheExpiry)
    .WithCorrelationId(correlationId);
```

TROUBLESHOOTING GUIDE:
---------------------

🔧 **ID Inválido:**
   1. Verificar formato GUID
   2. Confirmar tenant existe no ambiente
   3. Validar permissões de acesso
   4. Verificar cache invalidation

🔧 **Nome Incorreto:**
   1. Verificar case sensitivity
   2. Confirmar caracteres especiais
   3. Verificar histórico de renomeações
   4. Testar busca fuzzy

🔧 **Domínio Não Funciona:**
   1. Verificar configuração DNS
   2. Testar resolução de nomes
   3. Validar certificado SSL
   4. Confirmar configuração CDN

🔧 **Tenant Foi Removido:**
   1. Verificar políticas de retenção
   2. Confirmar processo de restore
   3. Validar backups disponíveis
   4. Checar audit trail

MÉTRICAS E MONITORAMENTO:
------------------------
📊 **Métricas Automáticas:**
   - Taxa de tenant not found por tipo de busca
   - Distribuição de causas mais comuns
   - Performance de lookup por tipo
   - Padrões temporais de falhas

📊 **Alertas Configuráveis:**
   - Spike em tentativas de acesso inválidas
   - Padrões de enumeração suspeitos
   - Degradação de performance de lookup
   - Falhas em domínios específicos

📊 **Dashboards:**
   - Health de resolução de tenants
   - Top tenants não encontrados
   - Análise de causas raiz
   - Performance comparison

EXTENSÕES FUTURAS:
-----------------
🔮 **Fuzzy Search** - Busca aproximada por nome
🔮 **Suggestion Engine** - Sugestões baseadas em histórico
🔮 **Auto-correction** - Correção automática de typos
🔮 **Predictive Caching** - Cache inteligente baseado em padrões
🔮 **Multi-language Support** - Mensagens localizadas
🔮 **Integration Testing** - Testes automatizados de cenários

PERFORMANCE:
-----------
⚡ Lazy evaluation de possible causes
⚡ Cached validation patterns
⚡ Optimized string operations
⚡ Minimal allocations em hot paths
⚡ Async-friendly design

MANUTENÇÃO:
----------
🔧 Configuração via appsettings para causas customizadas
🔧 Extensibilidade para novos tipos de busca
🔧 Logging estruturado para análise
🔧 Testes automatizados para todos os cenários
🔧 Documentation atualizada automaticamente

CONSIDERAÇÕES DE SEGURANÇA:
--------------------------
⚠️ **Information Disclosure** - Não vazar informações de tenants existentes
⚠️ **Enumeration Attacks** - Rate limiting e detection
⚠️ **Timing Attacks** - Consistent response times
⚠️ **Audit Trail** - Log completo de tentativas
⚠️ **Access Control** - Validação de permissões
⚠️ **Data Masking** - Proteção de dados sensíveis

VERSIONAMENTO:
-------------
📋 Versão: 2.0.0
📋 Última Atualização: 2024
📋 Compatibilidade: .NET 8+
📋 Breaking Changes: Sim (Factory methods adicionados)
📋 Migration Path: Backward compatible
📋 Status: Produção

AUTOR & RESPONSÁVEL:
-------------------
👨‍💻 Desenvolvido por: Equipe AuthTenant
👨‍💻 Mantido por: Time de Platform
📧 Contato: platform@AuthTenant.com
🔗 Documentação: docs.AuthTenant.com/exceptions/tenant-not-found

=========================================================
