=========================================================
DOMAINEXCEPTION.CS - DOCUMENTAÇÃO TÉCNICA
=========================================================

VISÃO GERAL:
-----------
Classe base abstrata para todas as exceções de domínio no sistema AuthTenant.
Representa violações de regras de negócio, invariantes de domínio e estados inválidos.
Fornece funcionalidades avançadas de contextualização, auditoria e diagnóstico.

LOCALIZAÇÃO:
-----------
📁 AuthTenant.Domain/Exceptions/DomainException.cs

DEPENDÊNCIAS:
------------
✅ System.ComponentModel.DataAnnotations - Validações de dados
✅ System.Text.Json - Serialização JSON
✅ System.Exception - Herança de exceção base
✅ Dictionary<string, object> - Propriedades extensíveis

RESPONSABILIDADES:
-----------------
🔸 Base para todas as exceções específicas de domínio
🔸 Contextualização rica de erros com metadados
🔸 Auditoria e rastreamento de exceções
🔸 Serialização estruturada para logging
🔸 Correlação de erros em sistemas distribuídos
🔸 Categorização e priorização de severidade

PROPRIEDADES PRINCIPAIS:
-----------------------

1. IDENTIFICAÇÃO E AUDITORIA:
   ✅ ExceptionId (Guid) - ID único para rastreamento
   ✅ OccurredAt (DateTime) - Timestamp UTC da criação
   ✅ ExceptionType (string) - Nome da classe calculado
   ✅ ExceptionNamespace (string) - Namespace da exceção
   ✅ Rastreabilidade completa do ciclo de vida

2. CONTEXTO MULTI-TENANT:
   ✅ TenantId (string?) - Identificador do tenant
   ✅ UserId (string?) - Usuário relacionado ao erro
   ✅ Isolamento e auditoria por organização
   ✅ Compliance com LGPD/GDPR

3. CATEGORIZAÇÃO E SEVERIDADE:
   ✅ ErrorCode (string?) - Código específico do domínio
   ✅ Category (string) - Categoria para agrupamento
   ✅ Severity (ExceptionSeverity) - Nível de severidade
   ✅ Priorização automática de tratamento

4. CONTEXTO E CORRELAÇÃO:
   ✅ Context (string?) - Dados estruturados em JSON
   ✅ CorrelationId (Guid?) - ID para tracing distribuído
   ✅ Properties (Dictionary) - Propriedades extensíveis
   ✅ Rastreamento end-to-end

5. CONTROLE DE COMPORTAMENTO:
   ✅ IsRetryable (bool) - Indica se pode tentar novamente
   ✅ ShouldLog (bool) - Controla se deve ser logada
   ✅ Políticas de resiliência e observabilidade

ENUM EXCEPTION SEVERITY:
-----------------------

🟢 **Low (1)** - Erros esperados e controláveis
   • Validação de entrada
   • Regras de negócio simples
   • Dados não encontrados em consultas opcionais

🟡 **Medium (2)** - Erros significativos mas não críticos
   • Dados não encontrados em operações obrigatórias
   • Permissões insuficientes
   • Falhas em validações complexas

🟠 **High (3)** - Erros que afetam funcionalidades importantes
   • Falhas em integrações externas
   • Inconsistências de dados
   • Violations de invariantes de domínio

🔴 **Critical (4)** - Erros que comprometem o sistema
   • Corrupção de dados
   • Falhas de segurança
   • Estados irrecuperáveis

CONSTRUTORES DISPONÍVEIS:
------------------------

🔧 **Construtor Básico:**
   ```csharp
   protected DomainException(string message, string? tenantId, string? userId, string? errorCode)
   ```
   - Para exceções simples com contexto mínimo
   - Severidade Medium por padrão
   - Categoria "Domain" por padrão

🔧 **Construtor com Inner Exception:**
   ```csharp
   protected DomainException(string message, Exception innerException, ...)
   ```
   - Para wrapping de exceções externas
   - Preserva stack trace original
   - Contexto de exceção causadora

🔧 **Construtor Completo:**
   ```csharp
   protected DomainException(message, tenantId, userId, errorCode, category, severity, context, correlationId, isRetryable, shouldLog, innerException)
   ```
   - Controle total sobre todas as propriedades
   - Para cenários avançados
   - Máxima flexibilidade

MÉTODOS FLUENT API:
------------------

🔧 **WithProperty(key, value)**
   - Adiciona propriedades personalizadas
   - Retorna a própria instância (fluent)
   - Extensibilidade sem quebrar contratos

🔧 **WithContext(contextData)**
   - Adiciona contexto estruturado via objeto
   - Serialização automática para JSON
   - Combina com contexto existente

🔧 **WithCorrelationId(correlationId)**
   - Define ID de correlação
   - Rastreamento distribuído
   - Debugging de fluxos complexos

FUNCIONALIDADES DE SERIALIZAÇÃO:
-------------------------------

🔧 **ToJson()**
   - Serialização completa para JSON
   - Inclui todas as propriedades relevantes
   - Stack trace limitado (10 linhas)
   - Formato estruturado para logging

🔧 **ToString() Override**
   - Representação legível para humanos
   - Informações essenciais em uma linha
   - Separação clara de campos
   - Inclui inner exception se presente

🔧 **CombineJsonContext(existing, additional)**
   - Combina objetos JSON de contexto
   - Merge inteligente de propriedades
   - Fallback para concatenação simples
   - Tolerante a falhas de parsing

VALIDAÇÕES DE DADOS:
-------------------

📋 **Anotações de Validação:**
   - TenantId: StringLength(50)
   - UserId: StringLength(50)
   - ErrorCode: StringLength(20)
   - Category: StringLength(50)
   - Context: StringLength(2000)

📋 **Validações de Negócio:**
   - ExceptionId sempre único (Guid.NewGuid())
   - OccurredAt sempre UTC
   - Category padrão "Domain" se não especificada
   - Severity padrão Medium se não especificada

PADRÕES ARQUITETURAIS:
---------------------
🏗️ **Abstract Factory** - Base para exceções específicas
🏗️ **Builder Pattern** - Construção fluent com métodos With*
🏗️ **Strategy Pattern** - Diferentes tipos de serialização
🏗️ **Template Method** - Estrutura comum, detalhes específicos
🏗️ **Observer Pattern** - Notificação via logging
🏗️ **Composite Pattern** - Propriedades e contexto estruturados

INTEGRAÇÃO COM SISTEMA:
----------------------
🔗 **Logging Framework** - Serialização estruturada
🔗 **Monitoring Tools** - Métricas por severidade e categoria
🔗 **APM Solutions** - Tracing via CorrelationId
🔗 **Error Tracking** - Agrupamento por ErrorCode
🔗 **Alerting Systems** - Escalação baseada em Severity
🔗 **Audit Systems** - Rastreamento completo

CENÁRIOS DE USO:
---------------
✅ **Validação de Domínio** - Regras de negócio violadas
✅ **Estados Inválidos** - Invariantes quebradas
✅ **Recursos Não Encontrados** - Entidades inexistentes
✅ **Permissões Insuficientes** - Acesso negado
✅ **Integrações Falhadas** - Serviços externos indisponíveis
✅ **Dados Corrompidos** - Inconsistências detectadas

EXEMPLO DE IMPLEMENTAÇÃO:
------------------------
```csharp
public class ProductNotFoun
dException : DomainException
{
    public string ProductId { get; }
    
    public ProductNotFoundException(string productId, string? tenantId = null)
        : base(
            message: $"Produto com ID '{productId}' não foi encontrado",
            tenantId: tenantId,
            errorCode: "PRODUCT_NOT_FOUND",
            category: "NotFound",
            severity: ExceptionSeverity.Medium)
    {
        ProductId = productId;
        
        this.WithContext(new { 
            ProductId = productId,
            SearchContext = "ById",
            PossibleCauses = new[] { 
                "ID inválido", 
                "Produto removido", 
                "Permissões insuficientes" 
            }
        });
    }
}
```

EXEMPLO DE USO:
--------------
```csharp
// Uso básico
throw new ProductNotFoundException("PROD-123", "tenant-456");

// Uso com contexto rico
throw new ProductNotFoundException("PROD-123", "tenant-456")
    .WithProperty("SearchMethod", "ByCode")
    .WithProperty("UserRole", "Customer")
    .WithCorrelationId(correlationId)
    .WithContext(new {
        SearchFilters = filters,
        QueryParameters = parameters,
        Performance = new { 
            QueryTime = elapsed,
            CacheHit = false 
        }
    });

// Captura e logging
try
{
    // operação que pode falhar
}
catch (DomainException ex)
{
    logger.LogError(ex.ToJson());
    
    if (ex.IsRetryable)
    {
        // implementar retry
    }
    
    if (ex.Severity == ExceptionSeverity.Critical)
    {
        // notificar equipe
    }
}
```

FUNCIONALIDADES DE OBSERVABILIDADE:
----------------------------------
📊 **Métricas Automáticas:**
   - Contagem por tipo de exceção
   - Distribuição por severidade
   - Taxa de exceções por tenant
   - Performance de resolução

📊 **Alertas Configuráveis:**
   - Threshold por severidade
   - Spike detection
   - Padrões anômalos
   - SLA violations

📊 **Dashboards:**
   - Health overview por domínio
   - Top errors por categoria
   - Trends temporais
   - Correlation analysis

EXTENSIBILIDADE:
---------------
🔮 **Propriedades Customizadas** - Via Properties dictionary
🔮 **Contexto Estruturado** - Via Context JSON
🔮 **Metadados Dinâmicos** - Runtime information
🔮 **Hooks de Serialização** - Custom formatters
🔮 **Pipelines de Processamento** - Error handling chains
🔮 **Integração com APM** - Custom providers

PERFORMANCE:
-----------
⚡ Lazy evaluation de propriedades computadas
⚡ JSON serialization otimizada
⚡ Stack trace truncation para reduzir overhead
⚡ Dictionary pooling para Properties
⚡ String interning para categorias comuns

MANUTENÇÃO:
----------
🔧 Versionamento de schema via Version property
🔧 Backward compatibility garantida
🔧 Migration guides para breaking changes
🔧 Automated testing de serialização
🔧 Contract validation em CI/CD

CONSIDERAÇÕES DE SEGURANÇA:
--------------------------
🔒 **Sanitização de Dados** - Prevenção de information leakage
🔒 **PII Protection** - Masking de dados sensíveis
🔒 **Audit Trail** - Rastreamento completo
🔒 **Access Control** - Logs baseados em permissões
🔒 **Compliance** - LGPD/GDPR ready
🔒 **Rate Limiting** - Prevenção de spam de erros

CONSIDERAÇÕES DE COMPLIANCE:
---------------------------
⚠️ **LGPD/GDPR** - Anonymização de dados pessoais
⚠️ **SOX** - Auditoria financeira
⚠️ **HIPAA** - Proteção de dados de saúde
⚠️ **PCI-DSS** - Segurança de dados de pagamento
⚠️ **ISO 27001** - Gestão de segurança da informação
⚠️ **SOC 2** - Controles organizacionais

MÉTRICAS DE QUALIDADE:
---------------------
📈 **Error Rate** - Percentual de operações com erro
📈 **MTTR** - Mean Time To Resolution
📈 **Error Distribution** - Por categoria e severidade
📈 **Tenant Isolation** - Vazamento de dados entre tenants
📈 **Performance Impact** - Overhead de exception handling
📈 **Coverage** - Cobertura de cenários de erro

VERSIONAMENTO:
-------------
📋 Versão: 2.0.0
📋 Última Atualização: 2024
📋 Compatibilidade: .NET 8+
📋 Breaking Changes: Sim (v1 → v2)
📋 Migration Path: Disponível
📋 Status: Produção

AUTOR & RESPONSÁVEL:
-------------------
👨‍💻 Desenvolvido por: Equipe AuthTenant
👨‍💻 Mantido por: Time de Platform
📧 Contato: platform@AuthTenant.com
🔗 Documentação: docs.AuthTenant.com/exceptions

=========================================================
