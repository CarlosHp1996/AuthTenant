# ITenantModels.cs - Documentação Técnica

## Visão Geral
**Localização**: `AuthTenant.Domain/Interfaces/ITenantModels.cs`
**Tipo**: Classes Auxiliares e Interfaces de Suporte
**Propósito**: Fornece implementações concretas para interfaces auxiliares relacionadas ao gerenciamento de tenants.

## Responsabilidades
- Implementar critérios de busca para tenants
- Fornecer modelos para estatísticas de tenant
- Definir métricas de uso de tenant
- Suportar operações avançadas de administração
- Facilitar extensibilidade e manutenibilidade

## Classes Implementadas

### **TenantSearchCriteria**
```csharp
public class TenantSearchCriteria : ITenantSearchCriteria
{
    public string? SearchTerm { get; set; }
    public TenantStatus? Status { get; set; }
    public string? SubscriptionPlan { get; set; }
    public DateTime? CreatedAfter { get; set; }
    public DateTime? CreatedBefore { get; set; }
    public bool? IsActive { get; set; }
    public int? MinUsers { get; set; }
    public int? MaxUsers { get; set; }
    public IEnumerable<string>? Tags { get; set; }
}
```

### **TenantStatistics**
```csharp
public class TenantStatistics : ITenantStatistics
{
    public int TotalTenants { get; set; }
    public int ActiveTenants { get; set; }
    public int TrialTenants { get; set; }
    public int ExpiredTenants { get; set; }
    public Dictionary<string, int> TenantsByPlan { get; set; } = new();
    public Dictionary<string, int> TenantsByRegion { get; set; } = new();
    public double AverageUsersPerTenant { get; set; }
    public DateTime GeneratedAt { get; set; } = DateTime.UtcNow;
}
```

### **TenantUsageMetrics**
```csharp
public class TenantUsageMetrics : ITenantUsageMetrics
{
    public string TenantId { get; set; } = string.Empty;
    public int CurrentUsers { get; set; }
    public long CurrentStorage { get; set; }
    public int CurrentProducts { get; set; }
    public int CurrentApiCalls { get; set; }
    public DateTime LastActivity { get; set; }
    public DateTime MeasuredAt { get; set; } = DateTime.UtcNow;
}
```

## Propósito e Uso

### **1. TenantSearchCriteria**
**Finalidade**: Define critérios flexíveis para busca de tenants
**Casos de Uso**:
- Busca administrativa de tenants
- Filtros em dashboards
- Relatórios personalizados
- APIs de consulta

**Exemplo de Uso**:
```csharp
var criteria = new TenantSearchCriteria
{
    SearchTerm = "empresa",
    Status = TenantStatus.Active,
    SubscriptionPlan = "Premium",
    CreatedAfter = DateTime.UtcNow.AddMonths(-6),
    IsActive = true,
    MinUsers = 10
};

var tenants = await tenantRepository.SearchAsync(criteria);
```

### **2. TenantStatistics**
**Finalidade**: Fornece estatísticas agregadas do sistema
**Casos de Uso**:
- Dashboards administrativos
- Relatórios executivos
- Monitoramento de sistema
- Análise de crescimento

**Exemplo de Uso**:
```csharp
var stats = await tenantRepository.GetStatisticsAsync();

Console.WriteLine($"Total de Tenants: {stats.TotalTenants}");
Console.WriteLine($"Tenants Ativos: {stats.ActiveTenants}");
Console.WriteLine($"Média de Usuários: {stats.AverageUsersPerTenant:F2}");

foreach (var planStats in stats.TenantsByPlan)
{
    Console.WriteLine($"Plano {planStats.Key}: {planStats.Value} tenants");
}
```

### **3. TenantUsageMetrics**
**Finalidade**: Rastreia métricas de uso por tenant
**Casos de Uso**:
- Monitoramento de quotas
- Billing e faturamento
- Alertas de limite
- Análise de uso

**Exemplo de Uso**:
```csharp
var metrics = new TenantUsageMetrics
{
    TenantId = "tenant-123",
    CurrentUsers = 45,
    CurrentStorage = 2_147_483_648, // 2GB
    CurrentProducts = 1250,
    CurrentApiCalls = 15000,
    LastActivity = DateTime.UtcNow.AddMinutes(-5)
};

await tenantRepository.UpdateUsageMetricsAsync("tenant-123", metrics);

// Verificar limites
if (metrics.CurrentUsers > tenantLimits.MaxUsers)
{
    await alertService.SendLimitExceededAlert(metrics.TenantId, "Users");
}
```

## Extensibilidade e Personalização

### **Critérios de Busca Personalizados**
```csharp
public class ExtendedTenantSearchCriteria : TenantSearchCriteria
{
    public string? Industry { get; set; }
    public string? Country { get; set; }
    public decimal? MinMonthlyRevenue { get; set; }
    public decimal? MaxMonthlyRevenue { get; set; }
    public bool? HasCustomDomain { get; set; }
    public DateTime? LastLoginAfter { get; set; }
}
```

### **Estatísticas Avançadas**
```csharp
public class ExtendedTenantStatistics : TenantStatistics
{
    public Dictionary<string, decimal> RevenueByPlan { get; set; } = new();
    public Dictionary<string, double> ChurnRateByPlan { get; set; } = new();
    public Dictionary<string, TimeSpan> AverageSessionDuration { get; set; } = new();
    public int NewTenantsThisMonth { get; set; }
    public int CancelledTenantsThisMonth { get; set; }
    public double GrowthRate { get; set; }
}
```

### **Métricas Personalizadas**
```csharp
public class ExtendedTenantUsageMetrics : TenantUsageMetrics
{
    public int EmailsSent { get; set; }
    public int ReportsGenerated { get; set; }
    public long BandwidthUsed { get; set; }
    public int IntegrationsActive { get; set; }
    public Dictionary<string, object> CustomMetrics { get; set; } = new();
}
```

## Builder Pattern para Facilitar Uso

### **TenantSearchCriteriaBuilder**
```csharp
public class TenantSearchCriteriaBuilder
{
    private readonly TenantSearchCriteria _criteria = new();

    public TenantSearchCriteriaBuilder WithSearchTerm(string term)
    {
        _criteria.SearchTerm = term;
        return this;
    }

    public TenantSearchCriteriaBuilder WithStatus(TenantStatus status)
    {
        _criteria.Status = status;
        return this;
    }

    public TenantSearchCriteriaBuilder WithPlan(string plan)
    {
        _criteria.SubscriptionPlan = plan;
        return this;
    }

    public TenantSearchCriteriaBuilder CreatedInLastDays(int days)
    {
        _criteria.CreatedAfter = DateTime.UtcNow.AddDays(-days);
        return this;
    }

    public TenantSearchCriteriaBuilder WithUserRange(int min, int max)
    {
        _criteria.MinUsers = min;
        _criteria.MaxUsers = max;
        return this;
    }

    public TenantSearchCriteriaBuilder ActiveOnly()
    {
        _criteria.IsActive = true;
        return this;
    }

    public TenantSearchCriteria Build() => _criteria;
}

// Uso do Builder
var criteria = new TenantSearchCriteriaBuilder()
    .WithSearchTerm("tech")
    .WithStatus(TenantStatus.Active)
    .WithPlan("Premium")
    .CreatedInLastDays(90)
    .WithUserRange(10, 100)
    .ActiveOnly()
    .Build();
```

## Validação e Integridade

### **Validação de TenantSearchCriteria**
```csharp
public static class TenantSearchCriteriaValidator
{
    public static ValidationResult Validate(TenantSearchCriteria criteria)
    {
        var result = new ValidationResult();

        if (criteria.MinUsers.HasValue && criteria.MaxUsers.HasValue)
        {
            if (criteria.MinUsers > criteria.MaxUsers)
            {
                result.AddError("UserRange", "MinUsers não pode ser maior que MaxUsers");
            }
        }

        if (criteria.CreatedAfter.HasValue && criteria.CreatedBefore.HasValue)
        {
            if (criteria.CreatedAfter > criteria.CreatedBefore)
            {
                result.AddError("DateRange", "CreatedAfter não pode ser posterior a CreatedBefore");
            }
        }

        if (!string.IsNullOrEmpty(criteria.SearchTerm) && criteria.SearchTerm.Length < 2)
        {
            result.AddError("SearchTerm", "Termo de busca deve ter pelo menos 2 caracteres");
        }

        return result;
    }
}
```

### **Validação de TenantUsageMetrics**
```csharp
public static class TenantUsageMetricsValidator
{
    public static ValidationResult Validate(TenantUsageMetrics metrics)
    {
        var result = new ValidationResult();

        if (string.IsNullOrWhiteSpace(metrics.TenantId))
        {
            result.AddError("TenantId", "TenantId é obrigatório");
        }

        if (metrics.CurrentUsers < 0)
        {
            result.AddError("CurrentUsers", "CurrentUsers não pode ser negativo");
        }

        if (metrics.CurrentStorage < 0)
        {
            result.AddError("CurrentStorage", "CurrentStorage não pode ser negativo");
        }

        if (metrics.MeasuredAt > DateTime.UtcNow.AddMinutes(5))
        {
            result.AddError("MeasuredAt", "MeasuredAt não pode ser no futuro");
        }

        return result;
    }
}
```

## Serialização e API

### **JSON Serialization**
```csharp
// Configuração para API
services.Configure<JsonOptions>(options =>
{
    options.SerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
    options.SerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull;
});

// Exemplo de resposta API
[HttpGet("statistics")]
public async Task<ActionResult<TenantStatistics>> GetStatistics()
{
    var stats = await _tenantRepository.GetStatisticsAsync();
    return Ok(stats);
}

[HttpPost("search")]
public async Task<ActionResult<IEnumerable<Tenant>>> SearchTenants(
    [FromBody] TenantSearchCriteria criteria)
{
    var validation = TenantSearchCriteriaValidator.Validate(criteria);
    if (!validation.IsValid)
    {
        return BadRequest(validation.Errors);
    }

    var tenants = await _tenantRepository.SearchAsync(criteria);
    return Ok(tenants);
}
```

### **Swagger Documentation**
```csharp
/// <summary>
/// Critérios para busca de tenants
/// </summary>
public class TenantSearchCriteria : ITenantSearchCriteria
{
    /// <summary>
    /// Termo de busca (nome, domínio, etc.)
    /// </summary>
    /// <example>empresa</example>
    public string? SearchTerm { get; set; }

    /// <summary>
    /// Filtro por status do tenant
    /// </summary>
    /// <example>Active</example>
    public TenantStatus? Status { get; set; }

    /// <summary>
    /// Filtro por plano de assinatura
    /// </summary>
    /// <example>Premium</example>
    public string? SubscriptionPlan { get; set; }

    // ... outras propriedades com documentação
}
```

## Performance e Otimização

### **Caching de Estatísticas**
```csharp
public class CachedTenantStatisticsService
{
    private readonly ITenantRepository _repository;
    private readonly IMemoryCache _cache;
    private readonly ILogger _logger;

    public async Task<TenantStatistics> GetCachedStatisticsAsync()
    {
        const string cacheKey = "tenant_statistics";

        if (_cache.TryGetValue(cacheKey, out TenantStatistics? cached))
        {
            return cached!;
        }

        var stats = await _repository.GetStatisticsAsync();

        _cache.Set(cacheKey, stats, new MemoryCacheEntryOptions
        {
            AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(15),
            SlidingExpiration = TimeSpan.FromMinutes(5),
            Priority = CacheItemPriority.High
        });

        return stats;
    }
}
```

### **Otimização de Queries**
```csharp
public static class TenantQueryOptimizer
{
    public static IQueryable<Tenant> ApplyCriteria(
        IQueryable<Tenant> query, 
        TenantSearchCriteria criteria)
    {
        if (!string.IsNullOrEmpty(criteria.SearchTerm))
        {
            var term = criteria.SearchTerm.ToLower();
            query = query.Where(t => 
                t.Name.ToLower().Contains(term) ||
                t.Domain.ToLower().Contains(term) ||
                t.CustomDomain.ToLower().Contains(term));
        }

        if (criteria.Status.HasValue)
        {
            query = query.Where(t => t.Status == criteria.Status.Value);
        }

        if (!string.IsNullOrEmpty(criteria.SubscriptionPlan))
        {
            query = query.Where(t => t.SubscriptionPlan == criteria.SubscriptionPlan);
        }

        if (criteria.CreatedAfter.HasValue)
        {
            query = query.Where(t => t.CreatedAt >= criteria.CreatedAfter.Value);
        }

        if (criteria.CreatedBefore.HasValue)
        {
            query = query.Where(t => t.CreatedAt <= criteria.CreatedBefore.Value);
        }

        if (criteria.IsActive.HasValue)
        {
            query = query.Where(t => t.IsActive == criteria.IsActive.Value);
        }

        return query;
    }
}
```

## Testing e Mocking

### **Test Data Builders**
```csharp
public class TenantSearchCriteriaTestBuilder
{
    public static TenantSearchCriteria Default() => new TenantSearchCriteria();

    public static TenantSearchCriteria ActiveTenants() => new TenantSearchCriteria
    {
        Status = TenantStatus.Active,
        IsActive = true
    };

    public static TenantSearchCriteria PremiumTenants() => new TenantSearchCriteria
    {
        SubscriptionPlan = "Premium",
        Status = TenantStatus.Active
    };

    public static TenantSearchCriteria RecentTenants(int days = 30) => new TenantSearchCriteria
    {
        CreatedAfter = DateTime.UtcNow.AddDays(-days),
        Status = TenantStatus.Active
    };
}

public class TenantStatisticsTestBuilder
{
    public static TenantStatistics Default() => new TenantStatistics
    {
        TotalTenants = 100,
        ActiveTenants = 85,
        TrialTenants = 10,
        ExpiredTenants = 5,
        TenantsByPlan = new Dictionary<string, int>
        {
            { "Basic", 40 },
            { "Premium", 35 },
            { "Enterprise", 10 }
        },
        AverageUsersPerTenant = 12.5
    };
}
```

## Conclusão

As classes auxiliares em `ITenantModels.cs` fornecem implementações concretas robustas e extensíveis para operações avançadas de gerenciamento de tenants. Elas facilitam:

1. **Busca Flexível**: Critérios personalizáveis para diferentes cenários
2. **Monitoramento**: Estatísticas e métricas abrangentes
3. **Extensibilidade**: Fácil adição de novos critérios e métricas
4. **Performance**: Otimização através de cache e queries eficientes
5. **Manutenibilidade**: Código limpo e bem estruturado
6. **Testabilidade**: Builders e mocks para testes eficazes

Essas implementações servem como base sólida para funcionalidades avançadas de administração e monitoramento em sistemas multi-tenant enterprise.
