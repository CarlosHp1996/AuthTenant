# IAuditableEntity.cs - Documentação Técnica

## Visão Geral
**Localização**: `AuthTenant.Domain/Interfaces/IAuditableEntity.cs`
**Tipo**: Interface de Domínio
**Propósito**: Define o contrato para entidades auditáveis no sistema, fornecendo rastreamento de criação e modificação.

## Responsabilidades
- Definir propriedades obrigatórias para auditoria temporal
- Fornecer métodos de validação e verificação de estado
- Implementar helpers para cálculos de auditoria
- Garantir rastreabilidade completa de mudanças em entidades

## Estrutura da Interface

### Propriedades Principais
```csharp
DateTime CreatedAt { get; set; }           // Data/hora de criação
DateTime? UpdatedAt { get; set; }          // Data/hora da última atualização
string? CreatedBy { get; set; }            // Usuário criador
string? UpdatedBy { get; set; }            // Usuário da última atualização
```

### Propriedades Computadas
```csharp
bool HasBeenModified { get; }              // Se a entidade foi modificada
TimeSpan Age { get; }                      // Idade da entidade
TimeSpan? TimeSinceLastUpdate { get; }     // Tempo desde última atualização
```

### Métodos Utilitários
```csharp
void MarkAsUpdated(string? updatedBy = null)     // Marca como atualizada
bool IsAuditStateValid()                         // Valida estado de auditoria
string GetAuditSummary()                         // Resumo da auditoria
```

## Padrões Implementados

### 1. **Auditoria Temporal**
- Rastreamento automático de criação e modificação
- Timestamps UTC para consistência global
- Propriedades computadas para análise temporal

### 2. **Rastreamento de Usuário**
- Identificação do usuário criador
- Identificação do usuário modificador
- Suporte a operações do sistema (usuário null)

### 3. **Validação de Estado**
- Verificação de consistência temporal
- Validação de dados de auditoria
- Métodos de diagnóstico

## Benefícios da Implementação

### **Rastreabilidade**
- Histórico completo de mudanças
- Identificação de responsáveis
- Timestamps precisos para análise

### **Compliance**
- Atendimento a requisitos de auditoria
- Suporte a regulamentações (LGPD, GDPR)
- Histórico imutável de modificações

### **Debugging e Monitoramento**
- Facilita identificação de problemas
- Permite análise de padrões de uso
- Suporte a troubleshooting

## Implementação Recomendada

### **Em Entidades Base**
```csharp
public abstract class BaseEntity : IAuditableEntity
{
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    public DateTime? UpdatedAt { get; set; }
    public string? CreatedBy { get; set; }
    public string? UpdatedBy { get; set; }
    
    // Implementar métodos da interface...
}
```

### **Em DbContext**
```csharp
public override Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
{
    foreach (var entry in ChangeTracker.Entries<IAuditableEntity>())
    {
        if (entry.State == EntityState.Modified)
        {
            entry.Entity.MarkAsUpdated(GetCurrentUserId());
        }
    }
    
    return base.SaveChangesAsync(cancellationToken);
}
```

## Casos de Uso Principais

### 1. **Entidades de Negócio**
- Products, Users, Tenants
- Automatização via EF Core
- Rastreamento transparente

### 2. **Análise de Dados**
- Relatórios de atividade
- Métricas de uso
- Análise temporal

### 3. **Auditoria e Compliance**
- Logs de modificação
- Histórico de responsáveis
- Evidências para auditoria

## Considerações de Performance

### **Índices Recomendados**
- CreatedAt (para consultas temporais)
- UpdatedAt (para análise de modificações)
- CreatedBy/UpdatedBy (para busca por usuário)

### **Otimizações**
- Usar UTC para evitar problemas de timezone
- Implementar índices compostos quando necessário
- Considerar particionamento por data em grandes volumes

## Integração com Outros Componentes

### **Entity Framework Core**
- Interceptação automática via SaveChanges
- Configuration via Fluent API
- Aplicação automática em todas as entidades

### **Serviços de Domínio**
- Integração com ICurrentUserService
- Preenchimento automático de usuários
- Validação de permissões

### **Logging e Monitoramento**
- Integração com sistema de logs
- Métricas de modificação
- Alertas para padrões anômalos

## Melhorias Implementadas na Refatoração

### **Funcionalidades Adicionadas**
1. **Propriedades Computadas**: Age, TimeSinceLastUpdate, HasBeenModified
2. **Métodos Utilitários**: MarkAsUpdated, IsAuditStateValid, GetAuditSummary
3. **Documentação XML**: Completa para IntelliSense
4. **Validações**: Verificação de consistência temporal

### **Padrões Aplicados**
1. **Interface Segregation**: Responsabilidade específica
2. **Single Responsibility**: Foco em auditoria
3. **Open/Closed**: Extensível sem modificação
4. **Documentation**: XML docs completa

### **Melhorias de Qualidade**
1. **Testabilidade**: Métodos facilmente testáveis
2. **Manutenibilidade**: Código limpo e bem documentado
3. **Extensibilidade**: Fácil de estender para novos casos
4. **Performance**: Propriedades computadas otimizadas

## Roadmap de Evolução

### **Próximas Funcionalidades**
1. **Auditoria Granular**: Rastreamento por campo
2. **Soft Delete**: Integração com deleção lógica
3. **Versionamento**: Controle de versões de entidade
4. **Compressão**: Otimização para grandes volumes

### **Integrações Futuras**
1. **Event Sourcing**: Suporte a eventos de auditoria
2. **CQRS**: Separação de comandos e consultas
3. **Cache**: Otimização de consultas de auditoria
4. **Analytics**: Dashboards de atividade

## Conclusão

A interface `IAuditableEntity` fornece a base sólida para auditoria e rastreabilidade no sistema, implementando padrões modernos de DDD e garantindo compliance com requisitos de negócio e regulamentações. A refatoração introduziu melhorias significativas em funcionalidade, documentação e extensibilidade.
