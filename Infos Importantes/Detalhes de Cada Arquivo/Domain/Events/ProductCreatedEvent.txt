=========================================================
PRODUCTCREATEDEVENT.CS - DOCUMENTAÇÃO TÉCNICA
=========================================================

VISÃO GERAL:
-----------
Evento de domínio especializado disparado quando um novo produto é criado.
Implementa comunicação assíncrona entre bounded contexts para orquestrar
processos de integração, indexação, notificações e analytics.
Segue padrões DDD com rich context e immutability.

LOCALIZAÇÃO:
-----------
📁 AuthTenant.Domain/Events/ProductCreatedEvent.cs

DEPENDÊNCIAS:
------------
✅ DomainEvent - Classe base com funcionalidades comuns
✅ Product - Entidade de domínio do produto
✅ System.ComponentModel.DataAnnotations - Validações
✅ System.Text.Json - Manipulação de metadados JSON

RESPONSABILIDADES:
-----------------
🔸 Notificar criação de produtos para sistemas dependentes
🔸 Orquestrar processos de indexação e search
🔸 Trigger de emails e notificações administrativas
🔸 Alimentar sistemas de analytics e metrics
🔸 Sincronizar dados com sistemas externos
🔸 Auditoria detalhada de criações de produto

PROPRIEDADES PRINCIPAIS:
-----------------------

1. DADOS DO PRODUTO:
   ✅ Product (Product) - Entidade completa do produto criado
   ✅ Validação de não-nulidade e consistência
   ✅ Acesso a todas as propriedades do produto
   ✅ Informações completas para processamento

2. CONTEXTO DE CRIAÇÃO:
   ✅ Context (ProductCreationContext) - Contexto detalhado
   ✅ Source - Origem da criação (Web, API, Import)
   ✅ CreatedAt - Timestamp específico da criação
   ✅ ImportBatch - ID do lote de importação (se aplicável)
   ✅ ApiVersion - Versão da API usada (se aplicável)
   ✅ AdditionalData - Dados contextuais extras

3. HERANÇA DE DOMAINEVENT:
   ✅ Id, TenantId, UserId - Identificação e auditoria
   ✅ OccurredOn, Version - Timestamp e versionamento
   ✅ CorrelationId, Metadata - Rastreabilidade distribuída

CONSTRUTOR PRINCIPAL:
--------------------

🔧 ProductCreatedEvent(product, tenantId, userId?, source, correlationId?)
   - Construção controlada com validações
   - Parâmetros obrigatórios: product, tenantId
   - Parâmetros opcionais com defaults sensatos
   - Validação de argumentos no momento da criação
   - Context gerado automaticamente com timestamp

VALIDAÇÕES DE NEGÓCIO:
---------------------

1. PRODUTO:
   ❌ Product não pode ser nulo
   ❌ Product deve estar válido (Product.IsValid())
   ❌ Product.Name não pode ser vazio
   ❌ Product.TenantId deve corresponder ao evento

2. TENANT:
   ❌ TenantId obrigatório e não-vazio
   ❌ Consistência entre Product.TenantId e Event.TenantId
   ❌ Formato válido de identificador

3. CONTEXTO:
   ❌ Source não pode ser nulo ou vazio
   ❌ CreatedAt não pode ser no futuro
   ❌ ImportBatch válido se fornecido
   ❌ ApiVersion com formato esperado

MÉTODOS IMPLEMENTADOS:
---------------------

🔧 IsValid() : bool (override)
   - Validação completa da estrutura do evento
   - Chama validação base + validações específicas
   - Verifica consistência Product ↔ Event
   - Garante integridade antes do dispatch

🔧 WithCorrelationId(Guid newCorrelationId) : DomainEvent (override)
   - Cria nova instância com correlation ID atualizado
   - Mantém imutabilidade do record
   - Suporte a distributed tracing
   - Preserva todos os outros dados

🔧 WithMetadata(string additionalMetadata) : DomainEvent (override)
   - Merge inteligente de metadados JSON
   - Combina metadados existentes com novos
   - Tratamento de erro gracioso
   - Extensibilidade sem breaking changes

🔧 ToString() : string (override)
   - Logging estruturado e debugging
   - Informações essenciais do produto
   - Contexto de criação incluído
   - Formato legível para troubleshooting

CONTEXT CLASS - PRODUCTCREATIONCONTEXT:
--------------------------------------

📋 PROPRIEDADES:
   ✅ Source - Origem: "Web", "API", "Import", "SSO"
   ✅ CreatedAt - Timestamp específico da criação
   ✅ ImportBatch - ID do lote (para imports em massa)
   ✅ ApiVersion - Versão da API (para chamadas API)
   ✅ AdditionalData - Dictionary para dados extras

📋 PROPRIEDADES COMPUTADAS:
   🔧 IsImportCreation - Detecta criação via import
   🔧 IsApiCreation - Detecta criação via API
   🔧 TimeSinceCreation - Tempo decorrido desde criação

CASOS DE USO TÍPICOS:
--------------------

1. **CRIAÇÃO VIA WEB INTERFACE:**
   ```csharp
   var evt = new ProductCreatedEvent(
       product: newProduct,
       tenantId: "tenant-123",
       userId: "user-456",
       source: "Web"
   );
   ```

2. **IMPORTAÇÃO EM LOTE:**
   ```csharp
   var context = new ProductCreationContext(
       Source: "Import",
       CreatedAt: DateTime.UtcNow,
       ImportBatch: "batch-2024-001"
   );
   ```

3. **CRIAÇÃO VIA API:**
   ```csharp
   var evt = new ProductCreatedEvent(
       product: apiProduct,
       tenantId: tenant,
       source: "API",
       correlationId: requestCorrelationId
   );
   ```

HANDLERS TÍPICOS:
----------------

🔧 **Search Indexing Handler:**
   - Indexa produto no Elasticsearch
   - Atualiza índices de busca
   - Configura análise de texto

🔧 **Analytics Handler:**
   - Registra métricas de criação
   - Atualiza dashboards
   - Alimenta relatórios

🔧 **Notification Handler:**
   - Emails para administradores
   - Notificações push
   - Webhooks para integrações

🔧 **Cache Invalidation Handler:**
   - Limpa caches relacionados
   - Atualiza cached queries
   - Refresh de views materializadas

🔧 **External Integration Handler:**
   - Sincroniza com ERP
   - Atualiza catálogos externos
   - Notifica marketplaces

EXEMPLO COMPLETO DE USO:
-----------------------

```csharp
// 1. No Agregado Product
public class Product : BaseEntity
{
    public static Product Create(string name, decimal price, string tenantId, string createdBy)
    {
        var product = new Product
        {
            Id = Guid.NewGuid().ToString(),
            Name = name,
            Price = price,
            TenantId = tenantId,
            CreatedBy = createdBy,
            CreatedAt = DateTime.UtcNow
        };

        // Adiciona evento de domínio
        product.AddDomainEvent(new ProductCreatedEvent(
            product: product,
            tenantId: tenantId,
            userId: createdBy,
            source: "Web"
        ));

        return product;
    }
}

// 2. Handler para Indexação
public class ProductCreatedIndexingHandler : INotificationHandler<ProductCreatedEvent>
{
    private readonly ISearchService _searchService;

    public async Task Handle(ProductCreatedEvent notification, CancellationToken ct)
    {
        var product = notification.Product;
        
        var searchDocument = new ProductSearchDocument
        {
            Id = product.Id,
            Name = product.Name,
            Description = product.Description,
            Price = product.Price,
            TenantId = product.TenantId,
            CreatedAt = notification.OccurredOn
        };

        await _searchService.IndexAsync(searchDocument, ct);
        
        _logger.LogInformation(
            "Product {ProductId} indexed for tenant {TenantId}",
            product.Id, product.TenantId);
    }
}

// 3. Handler para Analytics
public class ProductCreatedAnalyticsHandler : INotificationHandler<ProductCreatedEvent>
{
    public async Task Handle(ProductCreatedEvent notification, CancellationToken ct)
    {
        var metrics = new ProductCreationMetrics
        {
            ProductId = notification.Product.Id,
            TenantId = notification.TenantId,
            Source = notification.Context.Source,
            Category = notification.Product.Category,
            Price = notification.Product.Price,
            CreatedAt = notification.OccurredOn
        };

        await _analyticsService.RecordAsync(metrics, ct);
    }
}

// 4. Dispatch no Application Service
public class CreateProductCommandHandler : IRequestHandler<CreateProductCommand, Result<string>>
{
    public async Task<Result<string>> Handle(CreateProductCommand request, CancellationToken ct)
    {
        var product = Product.Create(
            request.Name, 
            request.Price, 
            request.TenantId, 
            request.CreatedBy);

        await _productRepository.AddAsync(product, ct);
        
        // MediatR automaticamente dispatcha os eventos de domínio
        await _unitOfWork.SaveChangesAsync(ct);
        
        return Result<string>.Success(product.Id);
    }
}
```

INTEGRAÇÃO COM SISTEMA:
----------------------

🔗 **MediatR Pipeline:**
   - Dispatch automático após SaveChanges
   - Processamento assíncrono de handlers
   - Retry policies para handlers críticos

🔗 **Event Store (futuro):**
   - Persistência de eventos para replay
   - Audit trail completo
   - Event sourcing capabilities

🔗 **Message Bus:**
   - Publicação para sistemas externos
   - Eventual consistency entre contextos
   - Integration events derivados

PERFORMANCE E ESCALABILIDADE:
----------------------------

⚡ Record imutável para performance
⚡ Lazy evaluation de propriedades computadas
⚡ Serialização otimizada para JSON
⚡ Handlers processados em paralelo
⚡ Batching para operações bulk

MONITORAMENTO E OBSERVABILIDADE:
-------------------------------

📊 Métricas de dispatch time
📊 Taxa de sucesso de handlers
📊 Latência de processamento
📊 Alertas para falhas críticas
📊 Dashboard de eventos por tenant

TROUBLESHOOTING:
---------------

🔍 **Evento não processado:**
   - Verificar registro de handlers no DI
   - Validar evento com IsValid()
   - Checar logs de exceções em handlers

🔍 **Performance degradada:**
   - Monitorar tempo de handlers
   - Verificar queries N+1 em handlers
   - Analisar locks e deadlocks

🔍 **Inconsistências:**
   - Validar TenantId consistency
   - Verificar timing de saveChanges
   - Checar ordem de processamento

EXTENSÕES FUTURAS:
-----------------

🔮 Product Variants Created - Para variações
🔮 Product Imported Event - Para imports específicos
🔮 Product Approved Event - Para workflows de aprovação
🔮 Product Rejected Event - Para validações falhadas
🔮 Product Cloned Event - Para duplicações

VERSIONAMENTO:
-------------

📋 Versão: 2.0.0
📋 Última Atualização: 2024
📋 Compatibilidade: .NET 8+ / MediatR 12+
📋 Status: Produção

AUTOR & RESPONSÁVEL:
-------------------

👨‍💻 Desenvolvido por: Equipe AuthTenant
👨‍💻 Mantido por: Time de Products
📧 Contato: products@AuthTenant.com

=========================================================
