=========================================================
DOMAINEVENT.CS - DOCUMENTAÇÃO TÉCNICA
=========================================================

VISÃO GERAL:
-----------
Classe base abstrata para todos os eventos de domínio no sistema.
Implementa o padrão Domain Events de Eric Evans (DDD) para comunicação
entre agregados e bounded contexts sem acoplamento direto.
Integra com MediatR para dispatch e handling de eventos.

LOCALIZAÇÃO:
-----------
📁 AuthTenant.Domain/Events/DomainEvent.cs

DEPENDÊNCIAS:
------------
✅ MediatR.INotification - Interface para notificações assíncronas
✅ System.ComponentModel.DataAnnotations - Validações de atributos
✅ System.Text.Json - Serialização de metadados

RESPONSABILIDADES:
-----------------
🔸 Base para todos os eventos de domínio do sistema
🔸 Padronização de propriedades comuns (Id, Timestamp, Tenant)
🔸 Integração com pipeline de notificações MediatR
🔸 Suporte a multi-tenancy e rastreabilidade
🔸 Versionamento e evolução de esquemas de eventos
🔸 Metadados extensíveis para contexto adicional

PROPRIEDADES PRINCIPAIS:
-----------------------

1. IDENTIFICAÇÃO ÚNICA:
   ✅ Id (Guid) - Identificador único do evento
   ✅ EventType (string) - Nome da classe do evento
   ✅ EventNamespace (string) - Namespace para categorização
   ✅ Rastreabilidade completa de eventos

2. TIMESTAMP E AUDITORIA:
   ✅ OccurredOn (DateTime) - Timestamp UTC de ocorrência
   ✅ Version (int) - Versão do esquema do evento
   ✅ Controle temporal e versionamento

3. MULTI-TENANCY:
   ✅ TenantId (string) - Identificador do inquilino
   ✅ UserId (string?) - Usuário que causou o evento
   ✅ Isolamento e rastreamento por tenant

4. RASTREABILIDADE DISTRIBUÍDA:
   ✅ CorrelationId (Guid?) - ID de correlação para distributed tracing
   ✅ Metadata (string?) - Metadados JSON extensíveis
   ✅ Observabilidade e debugging de fluxos

PROPRIEDADES COMPUTADAS:
------------------------

🔧 EventType
   - Nome da classe do evento automaticamente
   - Usado para roteamento e identificação
   - Exemplo: "ProductCreatedEvent", "UserRegisteredEvent"

🔧 EventNamespace
   - Namespace completo da classe
   - Categorização e filtragem de eventos
   - Exemplo: "AuthTenant.Domain.Events"

MÉTODOS PRINCIPAIS:
------------------

🔧 IsValid() : bool
   - Validação básica de consistência do evento
   - Verifica propriedades obrigatórias
   - TenantId não-vazio, OccurredOn válido, Version > 0
   - Override permitido para validações específicas

🔧 WithCorrelationId(Guid newCorrelationId) : DomainEvent (abstract)
   - Cria nova instância com Correlation ID atualizado
   - Padrão immutable para events
   - Implementação específica em cada evento
   - Suporte a distributed tracing

🔧 WithMetadata(string additionalMetadata) : DomainEvent (abstract)
   - Adiciona metadados ao evento
   - Merge inteligente de JSON
   - Extensibilidade sem quebrar contratos
   - Enriquecimento de contexto

🔧 ToString() : string (override)
   - Representação estruturada para logging
   - Inclui informações essenciais de debugging
   - Formato: "EventType [Id: ..., TenantId: ..., OccurredOn: ...]"
   - Facilita troubleshooting e auditoria

VALIDAÇÕES DE NEGÓCIO:
---------------------

1. PROPRIEDADES OBRIGATÓRIAS:
   ❌ TenantId não pode ser nulo ou vazio
   ❌ Id deve ser GUID válido (gerado automaticamente)
   ❌ OccurredOn não pode ser no futuro
   ❌ Version deve ser maior que zero

2. LIMITES DE DADOS:
   ❌ TenantId: 1-50 caracteres
   ❌ UserId: máximo 50 caracteres
   ❌ Metadata: máximo 2000 caracteres JSON
   ❌ Valores razoáveis para performance

3. FORMATO E CONSISTÊNCIA:
   ❌ Metadata deve ser JSON válido se fornecido
   ❌ CorrelationId deve ser GUID válido se fornecido
   ❌ OccurredOn sempre em UTC
   ❌ Consistência temporal com tolerância

FUNCIONALIDADES AVANÇADAS:
--------------------------

🚀 VERSIONAMENTO DE EVENTOS:
   - Campo Version para evolução de esquemas
   - Compatibilidade com versões anteriores
   - Migração gradual de estruturas
   - Suporte a deployment blue-green

🚀 DISTRIBUTED TRACING:
   - CorrelationId para rastreamento distribuído
   - Integração com APM tools
   - Debugging de fluxos complexos
   - Observabilidade end-to-end

🚀 METADADOS EXTENSÍVEIS:
   - Campo JSON para contexto adicional
   - Extensibilidade sem breaking changes
   - Enriquecimento por middlewares
   - Flexibilidade de evolução

🚀 MULTI-TENANT ISOLATION:
   - TenantId obrigatório em todos os eventos
   - Isolamento automático de processamento
   - Filtragem por tenant
   - Compliance e segurança

PADRÕES ARQUITETURAIS:
---------------------

🏗️ Domain Events (DDD) - Comunicação entre agregados
🏗️ Observer Pattern - Notificação de mudanças
🏗️ Mediator Pattern - Desacoplamento via MediatR
🏗️ Template Method - Base para eventos específicos
🏗️ Immutable Objects - Records imutáveis
🏗️ Event Sourcing Ready - Estrutura para ES

INTEGRAÇÃO COM SISTEMA:
----------------------

🔗 MediatR Pipeline - Dispatch e handling automático
🔗 Event Handlers - Processamento assíncrono
🔗 Event Store - Persistência de eventos (futuro)
🔗 Message Bus - Integração entre bounded contexts
🔗 Audit Log - Rastreamento de mudanças
🔗 Analytics - Métricas de negócio

CENÁRIOS DE USO:
---------------

✅ Comunicação entre agregados do mesmo bounded context
✅ Notificação de mudanças para outros bounded contexts
✅ Trigger de processos assíncronos (emails, integrações)
✅ Auditoria e compliance de mudanças
✅ Analytics e métricas de negócio
✅ Eventual consistency entre agregados
✅ Saga orchestration e choreography
✅ Event sourcing e CQRS

PERFORMANCE E ESCALABILIDADE:
----------------------------

⚡ Records imutáveis para performance
⚡ Serialização otimizada para JSON
⚡ Dispatch assíncrono via MediatR
⚡ Batching de eventos para throughput
⚡ Lazy evaluation de propriedades computadas
⚡ Memory efficient com value semantics

SEGURANÇA E COMPLIANCE:
----------------------

🔒 Isolamento por tenant obrigatório
🔒 Auditoria completa de eventos
🔒 Imutabilidade para integridade
🔒 Rastreabilidade de usuários
🔒 Metadados para contexto de segurança
🔒 Versionamento para compliance

OBSERVABILIDADE:
---------------

📊 Structured logging com ToString()
📊 Correlation ID para distributed tracing
📊 Métricas de dispatch e processing
📊 Health checks de event handlers
📊 Alertas de eventos críticos
📊 Debugging facilitado com metadados

EXEMPLO DE USO:
--------------

```csharp
// Evento personalizado herdando de DomainEvent
public record ProductPriceChangedEvent : DomainEvent
{
    public string ProductId { get; init; }
    public decimal OldPrice { get; init; }
    public decimal NewPrice { get; init; }
    public string Reason { get; init; }

    public ProductPriceChangedEvent(
        string productId, 
        decimal oldPrice, 
        decimal newPrice, 
        string reason,
        string tenantId, 
        string? userId = null) : this()
    {
        ProductId = productId;
        OldPrice = oldPrice;
        NewPrice = newPrice;
        Reason = reason;
        TenantId = tenantId;
        UserId = userId;
    }

    private ProductPriceChangedEvent() { }

    public override DomainEvent WithCorrelationId(Guid newCorrelationId)
        => this with { CorrelationId = newCorrelationId };

    public override DomainEvent WithMetadata(string additionalMetadata)
        => this with { Metadata = CombineMetadata(Metadata, additionalMetadata) };
}

// Uso em agregado
public class Product : BaseEntity
{
    public void UpdatePrice(decimal newPrice, string reason, string updatedBy)
    {
        var oldPrice = Price;
        Price = newPrice;
        
        // Adiciona evento de domínio
        AddDomainEvent(new ProductPriceChangedEvent(
            Id, oldPrice, newPrice, reason, TenantId, updatedBy));
    }
}

// Handler do evento
public class ProductPriceChangedHandler : INotificationHandler<ProductPriceChangedEvent>
{
    public async Task Handle(ProductPriceChangedEvent notification, CancellationToken ct)
    {
        // Atualizar cache de preços
        // Notificar sistema de pricing
        // Enviar email para admin se mudança > 20%
        // Atualizar analytics
    }
}
```

EXTENSÕES FUTURAS:
-----------------

🔮 Event Sourcing - Store completo de eventos
🔮 Event Replay - Replay para debugging/testing
🔮 Event Subscriptions - Webhooks para externos
🔮 Event Streaming - Real-time processing
🔮 Event Schemas - Validação automática de schemas
🔮 Event Encryption - Criptografia de eventos sensíveis

ANTI-PATTERNS A EVITAR:
-----------------------

❌ Eventos síncronos que causam coupling
❌ Eventos com side effects no constructor
❌ Eventos mutáveis que quebram integridade
❌ Eventos sem TenantId em sistema multi-tenant
❌ Eventos gigantes com toda a entidade
❌ Processamento síncrono de eventos

DEBUGGING E TROUBLESHOOTING:
---------------------------

🔍 Use CorrelationId para rastrear fluxos
🔍 Monitore timestamps para latência
🔍 Valide eventos com IsValid() antes de dispatch
🔍 Use ToString() em logs estruturados
🔍 Analise Metadata para contexto adicional
🔍 Verifique handlers registrados no DI

VERSIONAMENTO:
-------------

📋 Versão: 2.0.0
📋 Última Atualização: 2024
📋 Compatibilidade: .NET 8+ / MediatR 12+
📋 Status: Produção

AUTOR & RESPONSÁVEL:
-------------------

👨‍💻 Desenvolvido por: Equipe AuthTenant
👨‍💻 Mantido por: Time de Architecture
📧 Contato: architecture@AuthTenant.com

=========================================================
