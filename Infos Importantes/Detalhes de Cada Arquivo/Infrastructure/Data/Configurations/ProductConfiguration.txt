=================================
DOCUMENTAÇÃO TÉCNICA - ProductConfiguration.cs
=================================

ARQUIVO: AuthTenant.Infrastructure/Data/Configurations/ProductConfiguration.cs
CATEGORIA: Entity Configuration (Infrastructure)
ÚLTIMA ATUALIZAÇÃO: ${DateTime.Now}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. VISÃO GERAL
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DESCRIÇÃO:
Configuração do Entity Framework para a entidade Product, definindo esquema
de banco de dados, relacionamentos, restrições e regras de negócio para
gerenciamento de produtos em um ambiente multi-tenant.

RESPONSABILIDADES:
• Definir esquema de banco para a entidade Product
• Configurar isolamento multi-tenant por TenantId
• Estabelecer validações e restrições de negócio
• Configurar índices para performance de consultas
• Implementar soft delete e query filters
• Definir precisão para valores monetários e dimensões

ARQUITETURA:
• Fluent API Configuration Pattern
• Multi-Tenant Data Isolation
• Rich Domain Model Support
• Performance-Optimized Indexing Strategy

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2. ESTRUTURA TÉCNICA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

IMPLEMENTA:
• IEntityTypeConfiguration<Product>: Configuração fluente do EF Core

MÉTODOS DE CONFIGURAÇÃO:
• Configure(): Método principal orquestrando configurações
• ConfigureKey(): Configuração da chave primária
• ConfigureBasicProperties(): Propriedades básicas do produto
• ConfigureValueObjects(): Objetos de valor (futuro Money)
• ConfigureTenantRelationship(): Isolamento multi-tenant
• ConfigureIndexes(): Índices de performance
• ConfigureAuditProperties(): Propriedades de auditoria
• ConfigureSoftDelete(): Exclusão lógica

HERANÇA DA ENTIDADE:
• Product : BaseEntity
• Propriedades de auditoria (CreatedAt, UpdatedAt, etc.)
• Soft delete (IsDeleted)
• Tracking de usuários (CreatedBy, UpdatedBy)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3. PROPRIEDADES E VALIDAÇÕES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

IDENTIFICAÇÃO E NOMEAÇÃO:
• Id (Guid): Chave primária única
• Name (string, 200): Nome do produto, obrigatório
• SKU (string, 50): Código único de inventário
• Category (string, 100): Categoria para organização

DESCRIÇÃO E DETALHES:
• Description (string, 2000): Descrição detalhada opcional
• Tags (List<string>): Tags para busca e categorização
• IsActive (bool): Status ativo/inativo
• IsFeatured (bool): Produto em destaque

VALORES MONETÁRIOS:
• Price (decimal, 18,4): Preço com alta precisão
• Configurado para cálculos financeiros precisos
• Validação de valores positivos

DIMENSÕES E PESO:
• Weight (decimal, 8,3): Peso em quilogramas
• Length, Width, Height (decimal, 8,2): Dimensões em centímetros
• Precision otimizada para cálculos logísticos

GESTÃO DE ESTOQUE:
• StockQuantity (int): Quantidade atual em estoque
• MinimumStockLevel (int): Nível mínimo para alertas
• MaximumStockLevel (int): Nível máximo permitido

ANALYTICS:
• ViewCount (long): Contador de visualizações
• LastViewedAt (DateTime?): Última visualização

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
4. MULTI-TENANCY E ISOLAMENTO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ISOLAMENTO POR TENANT:
• TenantId (string, 100): Obrigatório, chave de particionamento
• Todos os produtos isolados por tenant
• Queries automáticas filtradas por tenant
• SKU único apenas dentro do tenant

RELACIONAMENTOS:
• TenantId como foreign key conceitual
• Navegação para Tenant não configurada diretamente
• Foco na performance e simplicidade

CONSTRAINTS MULTI-TENANT:
• SKU único por tenant (quando não nulo)
• Produtos organizados por tenant automaticamente
• Soft delete isolado por tenant

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
5. ESTRATÉGIA DE INDEXAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ÍNDICES ÚNICOS:
• IX_Products_TenantId_SKU: SKU único por tenant
• Filter aplicado para SKU NOT NULL
• Garante integridade de inventário

ÍNDICES DE FILTRAGEM:
• IX_Products_TenantId_IsActive: Produtos ativos
• IX_Products_TenantId_Category: Filtragem por categoria
• IX_Products_TenantId_IsDeleted: Soft delete

ÍNDICES DE BUSCA:
• IX_Products_TenantId_Name: Busca por nome
• IX_Products_TenantId_StockQuantity: Gestão de estoque

ÍNDICE COMPOSTO:
• IX_Products_TenantId_IsActive_Category_CreatedAt
• Otimiza queries complexas de listagem
• Suporte a paginação eficiente

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
6. SOFT DELETE E AUDITORIA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

SOFT DELETE:
• IsDeleted (bool): Flag de exclusão lógica
• Query filter global automático
• Produtos deletados preservados para auditoria
• Índice otimizado para filtragem

PROPRIEDADES DE AUDITORIA:
• CreatedAt (DateTime): Data de criação, obrigatória
• UpdatedAt (DateTime?): Data da última atualização
• CreatedBy (string, 100): Usuário criador
• UpdatedBy (string, 100): Último usuário modificador

RASTREAMENTO:
• Histórico completo de mudanças
• Identificação de responsáveis
• Timestamps automáticos via BaseEntity

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
7. PERFORMANCE E OTIMIZAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

OTIMIZAÇÕES IMPLEMENTADAS:
• Índices estratégicos para consultas comuns
• Query filters aplicados automaticamente
• Conversão otimizada de Tags (string join/split)
• Defaults apropriados para reduzir NULL checks

CONSULTAS OTIMIZADAS:
• Busca por SKU: O(1) via índice único
• Listagem por categoria: Índice dedicado
• Produtos ativos: Filter + índice otimizado
• Contagem de estoque: Índice específico

RECOMENDAÇÕES DE USO:
• Sempre incluir TenantId em queries
• Usar projeções para listagens grandes
• Implementar paginação para resultados extensos
• Cache para consultas frequentes

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
8. EXTENSIBILIDADE FUTURA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

VALUE OBJECTS:
• ConfigureValueObjects() preparado para Money
• Suporte futuro a Price como Money value object
• Currency isolation por tenant
• Conversões automáticas de moeda

RELACIONAMENTOS FUTUROS:
• Product → Category entity
• Product → Brand entity
• Product → ProductImages collection
• Product → ProductVariants collection

FUNCIONALIDADES PLANEJADAS:
• Multi-currency pricing
• Variant management
• Image galleries
• Review system
• Inventory tracking
• Price history

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
9. EXEMPLO DE USO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

APLICAÇÃO DA CONFIGURAÇÃO:
// Em DbContext
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.ApplyConfiguration(new ProductConfiguration());
}

CRIAÇÃO DE PRODUTO:
var product = new Product
{
    Name = "iPhone 15 Pro",
    Description = "Latest Apple smartphone",
    Price = 999.99m,
    SKU = "IPH15P-128",
    Category = "Smartphones",
    Weight = 0.187m,
    Length = 15.09m,
    Width = 7.09m,
    Height = 0.82m,
    StockQuantity = 50,
    MinimumStockLevel = 10,
    TenantId = "apple-store",
    Tags = new List<string> { "apple", "smartphone", "premium" }
};

QUERIES OTIMIZADAS:
// Busca por SKU (usa índice único)
var product = await context.Products
    .Where(p => p.TenantId == tenantId && p.SKU == sku)
    .FirstOrDefaultAsync();

// Listagem por categoria (usa índice)
var products = await context.Products
    .Where(p => p.TenantId == tenantId && p.Category == category)
    .OrderBy(p => p.CreatedAt)
    .Take(20)
    .ToListAsync();

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
10. TESTES E VALIDAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

CENÁRIOS DE TESTE:
• Criação de produtos com dados válidos/inválidos
• Validação de SKU único por tenant
• Soft delete e query filters
• Conversão de Tags (serialização)
• Performance de índices
• Isolamento multi-tenant

TESTES DE PERFORMANCE:
• Benchmark de queries por índice
• Teste de paginação com grandes volumes
• Medição de overhead dos query filters
• Análise de planos de execução

VALIDAÇÃO DE INTEGRIDADE:
• Constraints de tamanho respeitadas
• Valores decimais com precisão correta
• Relacionamentos mantendo consistência
• Auditoria funcionando corretamente
