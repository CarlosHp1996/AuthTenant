=================================
DOCUMENTAÇÃO TÉCNICA - TenantConfiguration.cs
=================================

ARQUIVO: AuthTenant.Infrastructure/Data/Configurations/TenantConfiguration.cs
CATEGORIA: Entity Configuration (Infrastructure)
ÚLTIMA ATUALIZAÇÃO: ${DateTime.Now}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. VISÃO GERAL
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DESCRIÇÃO:
Configuração do Entity Framework para a entidade Tenant, definindo o esquema
de banco de dados, restrições, índices e seed de dados para suporte multi-tenant.
Esta configuração é fundamental para a arquitetura de multi-tenancy do sistema.

RESPONSABILIDADES:
• Definir esquema de banco para a entidade Tenant
• Configurar validações e restrições de dados
• Estabelecer índices para performance
• Configurar serialização JSON para Settings
• Implementar seed de tenant padrão
• Configurar soft delete e query filters

ARQUITETURA:
• Fluent API Configuration Pattern
• Multi-Tenant Architecture Foundation
• JSON Serialization for Complex Types
• Data Seeding Pattern

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2. ESTRUTURA TÉCNICA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

IMPLEMENTA:
• IEntityTypeConfiguration<Tenant>: Configuração fluente do EF Core

MÉTODOS PRINCIPAIS:
• Configure(): Método principal de configuração
• ConfigureSettingsProperty(): Configuração JSON para Settings
• ConfigureIndexes(): Definição de índices de performance
• ConfigureAuditProperties(): Propriedades de auditoria
• SeedDefaultTenant(): Dados iniciais do sistema

PROPRIEDADES CONFIGURADAS:
• Id (string, 100 chars): Chave primária do tenant
• Name (string, 200 chars): Nome único do tenant
• DisplayName (string, 200 chars): Nome para exibição
• Description (string, 500 chars): Descrição opcional
• ConnectionString (string, 1000 chars): String de conexão dedicada
• Settings (Dictionary<string,string>): Configurações JSON
• IsActive (bool): Status ativo/inativo
• CreatedAt, UpdatedAt, IsDeleted: Propriedades de auditoria

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3. CONFIGURAÇÕES DE BANCO DE DADOS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

CHAVE PRIMÁRIA:
• Id: Chave primária string com até 100 caracteres
• Usado como partition key em toda a aplicação

RESTRIÇÕES DE VALIDAÇÃO:
• Id: Obrigatório, máximo 100 caracteres
• Name: Obrigatório, máximo 200 caracteres, único
• DisplayName: Obrigatório, máximo 200 caracteres
• Description: Opcional, máximo 500 caracteres
• ConnectionString: Opcional, máximo 1000 caracteres

CONFIGURAÇÃO JSON:
• Settings: Serializado como JSONB (PostgreSQL)
• Comparador customizado para detecção de mudanças
• Configuração de JsonSerializerOptions otimizada
• Snapshot creation para change tracking eficiente

ÍNDICES DE PERFORMANCE:
• IX_Tenants_Name: Único, para roteamento de tenant
• IX_Tenants_IsActive: Filtragem de tenants ativos
• IX_Tenants_IsActive_CreatedAt: Consultas compostas

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
4. MULTI-TENANCY E ISOLAMENTO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ISOLAMENTO DE DADOS:
• Tenant como entidade raiz para isolamento
• Query filter global para soft delete
• Unique constraints respeitam boundaries de tenant
• Settings específicas por tenant em JSON

IDENTIFICAÇÃO ÚNICA:
• Name deve ser único globalmente
• Id serve como partition key
• DisplayName para interface de usuário
• Description para documentação administrativa

CONFIGURAÇÕES FLEXÍVEIS:
• Settings como Dictionary<string,string> em JSON
• Extensibilidade através de configurações dinâmicas
• Suporte a temas, idiomas, fusos horários
• Configurações de negócio específicas por tenant

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
5. SEED DE DADOS E INICIALIZAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

TENANT PADRÃO:
• Id: "default" - Tenant do sistema
• Name: "default" - Nome técnico
• DisplayName: "Default Tenant" - Nome amigável
• Description: "Default system tenant for initial setup"
• IsActive: true - Sempre ativo
• CreatedAt: 2025-01-01 UTC - Data fixa para consistência

CONFIGURAÇÕES INICIAIS:
• theme: "default" - Tema padrão da interface
• language: "en-US" - Idioma padrão
• timezone: "UTC" - Fuso horário padrão

PROPÓSITO DO SEED:
• Garantir existência de tenant para inicialização
• Fornecer base para desenvolvimento e testes
• Estabelecer padrões de configuração
• Facilitar setup inicial do sistema

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
6. PERFORMANCE E OTIMIZAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ESTRATÉGIAS DE PERFORMANCE:
• Índices otimizados para consultas de roteamento
• JSONB para Settings (PostgreSQL) - busca eficiente
• Query filters aplicados automaticamente
• Value comparer otimizado para Settings

ÍNDICES ESTRATÉGICOS:
• Name único: Roteamento O(1) por nome de tenant
• IsActive: Filtragem rápida de tenants ativos
• Composto IsActive + CreatedAt: Listagens ordenadas
• Evita table scans em operações comuns

OTIMIZAÇÕES DE MEMÓRIA:
• JsonSerializerOptions configurado uma vez
• Value comparer eficiente com HashCode.Combine
• Snapshot creation otimizada para change tracking
• Propriedades com defaults explícitos

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
7. SEGURANÇA E INTEGRIDADE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

VALIDAÇÕES DE INTEGRIDADE:
• Chave primária garante unicidade absoluta
• Nome único evita conflitos de roteamento
• Restrições de tamanho previnem overflow
• Valores obrigatórios garantem consistência

SOFT DELETE:
• IsDeleted para exclusão lógica
• Query filter global automático
• Preservação de dados para auditoria
• Recuperação possível se necessário

CONFIGURAÇÕES SEGURAS:
• Settings como JSON com validação de tipo
• Comparador seguro para null/empty
• Serialização controlada com options específicas
• Defaults seguros para propriedades críticas

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
8. TESTES E VALIDAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

CENÁRIOS DE TESTE RECOMENDADOS:
• Criação de tenant com dados válidos/inválidos
• Validação de unicidade de Name
• Serialização/deserialização de Settings
• Query filters funcionando corretamente
• Seed de dados executando sem erros

TESTES DE PERFORMANCE:
• Consultas por Name (deve usar índice único)
• Filtragem por IsActive (deve usar índice)
• Operações em Settings JSON
• Change tracking do value comparer

TESTES DE INTEGRIDADE:
• Constraints de tamanho respeitados
• Campos obrigatórios validados
• Soft delete funcionando
• Relacionamentos mantendo integridade

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
9. INTEGRAÇÃO COM OUTRAS ENTIDADES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

RELACIONAMENTOS:
• ApplicationUser.TenantId → Tenant.Id
• Product.TenantId → Tenant.Id
• Outras entidades tenant-aware

PADRÃO DE USO:
• TenantId como foreign key em entidades filhas
• Isolamento automático via TenantId
• Cascata restritiva para preservar integridade
• Query filters aplicados em toda a hierarquia

MIDDLEWARE INTEGRATION:
• Tenant resolution baseado em Name
• Context injection para operações
• Roteamento automático por tenant
• Configurações aplicadas dinamicamente

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
10. EXEMPLO DE USO E MIGRAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

APLICAÇÃO DA CONFIGURAÇÃO:
// Em DbContext
protected override void OnModelCreating(ModelBuilder modelBuilder)
{
    modelBuilder.ApplyConfiguration(new TenantConfiguration());
}

CRIAÇÃO DE TENANT:
var tenant = new Tenant
{
    Id = "company-abc",
    Name = "company-abc", 
    DisplayName = "Company ABC",
    Description = "ABC Company tenant",
    Settings = new Dictionary<string, string>
    {
        { "theme", "corporate" },
        { "language", "pt-BR" }
    }
};

MIGRATION GERADA:
• Tabela Tenants com colunas tipadas
• Índices únicos e compostos
• Constraints de tamanho e obrigatoriedade
• Seed data para tenant default
• Comment columns para documentação
