=================================
DOCUMENTAÇÃO TÉCNICA - TenantMiddleware.cs
=================================

ARQUIVO: AuthTenant.Infrastructure/MultiTenant/TenantMiddleware.cs
CATEGORIA: ASP.NET Core Middleware (Infrastructure)
ÚLTIMA ATUALIZAÇÃO: ${DateTime.Now}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1. VISÃO GERAL
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DESCRIÇÃO:
TenantMiddleware é um middleware ASP.NET Core responsável pela validação e 
configuração do contexto de tenant em cada requisição HTTP. Atua como um 
gateway de segurança e configuração, garantindo que apenas requisições com 
tenant válido e ativo prossigam na pipeline.

RESPONSABILIDADES:
• Validar existência e status do tenant para cada requisição
• Configurar contexto de tenant para toda a pipeline
• Implementar rotas de exclusão (health checks, auth endpoints)
• Fornecer error handling específico para problemas de tenant
• Adicionar headers de resposta com informações de tenant
• Logging e auditoria de todas as operações de tenant
• Performance monitoring com métricas detalhadas

ARQUITETURA:
• ASP.NET Core Middleware Pattern
• Options Pattern para configuração
• Dependency Injection Integration
• Structured Logging Pattern
• Performance Monitoring Pattern
• Error Handling Strategy Pattern

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2. PIPELINE DE VALIDAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ORDEM DE EXECUÇÃO:
1. Validação de parâmetros de entrada
2. Resolução do tenant ID via ICurrentTenantService
3. Logging do contexto da requisição
4. Verificação de rotas excluídas
5. Validação de existência do tenant
6. Validação de status ativo do tenant
7. Configuração de headers de resposta
8. Adição de context items
9. Passagem para próximo middleware

VALIDAÇÃO DE ENTRADA:
• HttpContext null check
• Dependency injection validation
• Service availability verification
• Early return para cenários inválidos

RESOLUÇÃO DE TENANT:
• Delegada para ICurrentTenantService
• Múltiplas estratégias (JWT, headers, override)
• Fallback para default tenant
• Error handling transparente

VALIDAÇÃO DE ROTAS:
• Lista configurável de rotas excluídas
• Case-insensitive path matching
• StartsWith comparison para flexibilidade
• Skip validation para endpoints públicos

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3. CONFIGURAÇÃO VIA OPTIONS PATTERN
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

TENANTMIDDLEWAREOPTIONS:
• ExcludedPaths: Lista de rotas para pular validação
• AddTenantToResponseHeaders: Flag para adicionar headers
• ValidationTimeout: Timeout para operações de validação

ROTAS EXCLUÍDAS PADRÃO:
• "/health" - Health check endpoints
• "/metrics" - Prometheus/monitoring metrics
• "/swagger" - Swagger UI e documentação
• "/api/auth/login" - Endpoint de autenticação
• "/api/auth/register" - Endpoint de registro

CONFIGURAÇÃO NO DI:
```csharp
services.Configure<TenantMiddlewareOptions>(options =>
{
    options.ExcludedPaths.Add("/api/public");
    options.AddTenantToResponseHeaders = true;
    options.ValidationTimeout = TimeSpan.FromSeconds(10);
});
```

CONFIGURAÇÃO VIA APPSETTINGS:
```json
{
  "TenantMiddleware": {
    "ExcludedPaths": ["/health", "/metrics", "/swagger", "/api/auth"],
    "AddTenantToResponseHeaders": true,
    "ValidationTimeout": "00:00:05"
  }
}
```

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
4. ERROR HANDLING E EXCEPTION MANAGEMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

TRATAMENTO DE TENANTNOTFOUNDEXCEPTION:
• Status Code: 404 Not Found
• Content-Type: application/json
• Response body estruturado com detalhes
• Logging de warning com context

TRATAMENTO DE TENANT INATIVO:
• Status Code: 403 Forbidden  
• Logged como warning
• Response padronizado JSON
• Tenant ID incluído na resposta

RESPONSE STRUCTURE:
```json
{
  "error": "Tenant not found",
  "tenantId": "invalid-tenant-123",
  "message": "Tenant 'invalid-tenant-123' was not found",
  "timestamp": "2024-01-15T10:30:00Z"
}
```

ERROR PREVENTION:
• HasStarted check antes de escrever response
• Exception isolation entre requests
• Graceful degradation para unexpected errors
• Comprehensive logging para troubleshooting

VALIDATION STRATEGY:
• Repository call para verificar existência
• IsActive check para status validation
• CancellationToken support para timeout
• Cache integration via repository

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
5. PERFORMANCE MONITORING E METRICS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

PERFORMANCE TRACKING:
• Stopwatch para timing de requests
• Activity para distributed tracing
• Elapsed time logging
• Performance baselines estabelecidos

METRICS COLETADAS:
• Request processing time
• Tenant validation time
• Cache hit/miss ratios (via CurrentTenantService)
• Error rates por tenant
• Throughput por tenant

DISTRIBUTED TRACING:
• Activity integration para correlation
• Trace context propagation
• Custom activity names
• Integration com Application Insights/Jaeger

LOGGING DE PERFORMANCE:
• LogDebug para timing information
• Structured logging com metrics
• Performance alerts configuráveis
• Historical trend analysis

OPTIMIZATION STRATEGIES:
• Cache-first tenant validation
• Fast path para default tenant
• Excluded paths bypass
• Minimal object allocation

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
6. LOGGING E AUDITORIA
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

STRUCTURED LOGGING:
• LogInformation para todas as requisições
• LogDebug para path skipping
• LogWarning para tenant issues
• LogError para unexpected exceptions

AUDIT INFORMATION:
• Tenant ID para cada requisição
• Client IP address
• User-Agent information
• HTTP method e path
• Processing timestamp

LOG CONTEXT:
```
Processing request for tenant {TenantId} from {ClientIp} - {Method} {Path} - User-Agent: {UserAgent}
```

SECURITY LOGGING:
• Failed tenant validations
• Suspicious tenant access patterns
• Authentication context
• Rate limiting information

PERFORMANCE LOGGING:
• Request processing time
• Middleware execution time
• Database validation time
• Cache performance metrics

CORRELATION LOGGING:
• Request correlation IDs
• Trace context propagation
• Cross-service request tracking
• End-to-end transaction logging

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
7. CONTEXT MANAGEMENT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

HTTPCONTEXT ITEMS:
• TenantIdContextKey para acesso downstream
• Availível em toda a pipeline
• Strongly-typed access via extensions
• Cleanup automático no fim da request

RESPONSE HEADERS:
• X-Tenant-Id header (opcional)
• Útil para debugging e monitoring
• Client-side tenant verification
• API gateway integration

CONTEXT PROPAGATION:
• Tenant context available para todos os services
• DI container scope management
• Cross-service call propagation
• Background task context preservation

INTEGRATION POINTS:
• Entity Framework query filters
• Authorization policies
• Background services
• Cached data segmentation

CONTEXT LIFECYCLE:
• Setup no início da request
• Available durante toda a pipeline
• Cleanup automático no disposal
• Memory management otimizado

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
8. SECURITY CONSIDERATIONS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

TENANT ISOLATION:
• Validate tenant before processing request
• Prevent cross-tenant data access
• Enforce tenant boundaries
• Audit tenant access patterns

INPUT VALIDATION:
• Sanitize tenant ID input
• Prevent injection attacks
• Validate tenant ID format
• Rate limiting per tenant

AUTHENTICATION INTEGRATION:
• JWT token validation
• Tenant claim verification
• Authorization policy enforcement
• Multi-factor authentication support

AUTHORIZATION BOUNDARIES:
• Tenant-scoped permissions
• Resource access validation
• Cross-tenant operation prevention
• Admin tenant privileges

DATA PROTECTION:
• Tenant data encryption
• Secure data transmission
• Audit trail maintenance
• GDPR compliance support

THREAT MITIGATION:
• DDoS protection per tenant
• Brute force attack prevention
• Anomaly detection
• Security event alerting

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
9. CONFIGURAÇÃO E REGISTRATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

MIDDLEWARE REGISTRATION:
```csharp
// Program.cs
app.UseMiddleware<TenantMiddleware>();

// ou com extension method
app.UseTenantMiddleware();
```

POSIÇÃO NA PIPELINE:
• Após authentication middleware
• Antes de authorization middleware
• Antes de routing middleware
• Após exception handling middleware

DEPENDENCY INJECTION:
```csharp
services.AddSingleton<ILogger<TenantMiddleware>>();
services.Configure<TenantMiddlewareOptions>(configuration.GetSection("TenantMiddleware"));
services.AddScoped<ICurrentTenantService, CurrentTenantService>();
services.AddScoped<ITenantRepository, TenantRepository>();
```

CONFIGURATION BINDING:
```csharp
builder.Services.Configure<TenantMiddlewareOptions>(
    builder.Configuration.GetSection("TenantMiddleware"));
```

DEVELOPMENT vs PRODUCTION:
• Desenvolvimento: Logging mais verboso
• Produção: Error handling mais rigoroso
• Testing: Mock dependencies
• Staging: Performance monitoring

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
10. EXEMPLO DE USO E INTEGRAÇÃO
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

CONFIGURAÇÃO COMPLETA:
```csharp
// Program.cs
var builder = WebApplication.CreateBuilder(args);

// Configurar services
builder.Services.AddInfrastructure(builder.Configuration);
builder.Services.Configure<TenantMiddlewareOptions>(options =>
{
    options.ExcludedPaths.Add("/api/webhooks");
    options.AddTenantToResponseHeaders = true;
});

var app = builder.Build();

// Pipeline configuration
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseMiddleware<TenantMiddleware>(); // Posição crítica
app.UseAuthorization();
app.MapControllers();

app.Run();
```

EXTENSION METHOD:
```csharp
public static class MiddlewareExtensions
{
    public static IApplicationBuilder UseTenantMiddleware(
        this IApplicationBuilder builder)
    {
        return builder.UseMiddleware<TenantMiddleware>();
    }
    
    public static IApplicationBuilder UseTenantMiddleware(
        this IApplicationBuilder builder,
        Action<TenantMiddlewareOptions> configureOptions)
    {
        var services = builder.ApplicationServices;
        services.Configure(configureOptions);
        return builder.UseMiddleware<TenantMiddleware>();
    }
}
```

CONTROLLER INTEGRATION:
```csharp
[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    [HttpGet]
    public IActionResult GetProducts()
    {
        // Tenant context já está configurado pelo middleware
        var tenantId = HttpContext.Items["TenantId"] as string;
        
        return Ok($"Products for tenant: {tenantId}");
    }
}
```

CUSTOM AUTHORIZATION:
```csharp
public class TenantAuthorizationHandler : 
    AuthorizationHandler<TenantRequirement>
{
    protected override Task HandleRequirementAsync(
        AuthorizationHandlerContext context,
        TenantRequirement requirement)
    {
        // Tenant já foi validado pelo middleware
        var httpContext = context.Resource as HttpContext;
        var tenantId = httpContext?.Items["TenantId"] as string;
        
        if (!string.IsNullOrEmpty(tenantId))
        {
            context.Succeed(requirement);
        }
        
        return Task.CompletedTask;
    }
}
```

TESTING CONFIGURATION:
```csharp
public class TenantMiddlewareTests
{
    [Test]
    public async Task Should_Validate_Tenant_Successfully()
    {
        // Arrange
        var options = Options.Create(new TenantMiddlewareOptions());
        var middleware = new TenantMiddleware(next, logger, options);
        
        // Act & Assert
        await middleware.InvokeAsync(httpContext, tenantService, tenantRepository);
    }
}
```

MONITORING INTEGRATION:
```csharp
// Application Insights
services.AddApplicationInsightsTelemetry();

// Custom metrics
services.AddSingleton<IMetricsCollector, TenantMetricsCollector>();

// Health checks
services.AddHealthChecks()
    .AddCheck<TenantHealthCheck>("tenant-validation");
```

BEST PRACTICES:
• Registrar middleware na posição correta da pipeline
• Configurar excluded paths apropriadamente
• Implementar comprehensive error handling
• Monitor performance metrics
• Use structured logging para auditoria
• Implementar health checks para tenant validation
• Configure timeouts apropriados
• Test com multiple tenant scenarios
• Implement circuit breaker para repository calls
• Use correlation IDs para distributed tracing
